<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>LFE Tutorials, News, &amp; Updates</title>
 <link href="http://blog.lfe.io//" rel="self"/>
 <link href="http://blog.lfe.io/"/>
 <updated>2014-12-25T12:29:09-06:00</updated>
 <id>http://blog.lfe.io/</id>
 <author>
   <name>LFElluminati | Alien Alliance</name>
   <email>lisp-flavored-erlang@googlegroups.com</email>
 </author>

 
 <entry>
   <title>Happy Holidays from LFE</title>
   <link href="http://blog.lfe.io//holidays/2014/12/25/1221-happy-holidays-from-lfe"/>
   <updated>2014-12-25T00:00:00-06:00</updated>
   <id>http://blog.lfe.io//holidays/2014/12/25/1221-happy-holidays-from-lfe</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;/assets/images/posts/LFE-Happy-Holidays.png&quot;&gt;&lt;img class=&quot;left medium&quot; src=&quot;/assets/images/posts/LFE-Happy-Holidays.png&quot; /&gt;&lt;/a&gt;
To all you Erlangers, Lispers, FP’ers, Hackers, and Open-Sorcerers – we wish
you the very best of holidays, a wonderful finishing of the year, and the
happiest of new years!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Post Sprint Report: LFE Experience</title>
   <link href="http://blog.lfe.io//reports/2014/12/17/1435-post-sprint-report-lfe-experience"/>
   <updated>2014-12-17T00:00:00-06:00</updated>
   <id>http://blog.lfe.io//reports/2014/12/17/1435-post-sprint-report-lfe-experience</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;/assets/images/posts/LispFlavoredErlang-medium-square.png&quot;&gt;&lt;img class=&quot;right small&quot; src=&quot;/assets/images/posts/LispFlavoredErlang-medium-square.png&quot; /&gt;&lt;/a&gt;My
team and I have just finished our first major sprint using LFE and I thought
this would be a good time to report on our experience. Our stack is built around
&lt;a href=&quot;http://yaws.hyber.org/&quot;&gt;YAWS&lt;/a&gt; and we are using MySQL as the database. We’re not
using any templating language, but instead relying on an API-based architecture
with all front-end interactions in JavaScript + HTML.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;We are a small team of developers who are trying to get a pretty major web
application launched in 12 weeks. This is a challenge in its own right, but
as we were evaluating web platforms, we ended up rejecting most others in
favor of Erlang. The choice was made collectively by all the devs who
evaluated all of our different options (the others being PHP, node.js,
Clojure, Scala, Haskell).  We picked Erlang primarily for the scalability,
reliability and ecosystem support.&lt;/p&gt;

&lt;p&gt;Of the team, I am the only experienced Lisper (Scheme, Racket, CL). I was
naturally attracted to LFE because of the philosophy of staying close to
Erlang, but still being a Lisp. I further made the decision that at least
some people would use LFE for development, perhaps mixed with Erlang. So we
now have a team that is learning Erlang and LFE at the same time. The devs
are all very competent, but this learning curve is our biggest risk at this
point. It is my hope that LFE will help us transcend the learning curve.
There are some indications that this is happening, but I will know more
for sure in a few more days.&lt;/p&gt;

&lt;h2 id=&quot;the-good&quot;&gt;The Good&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;I am impressed at the correctness of the implementation. I have not
seen unpredictable behavior yet and have unearthed no major correctness
issues in the language implementation. Kudos to the team for that!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I like the closeness to Erlang. Being able to mindlessly call Erlang
modules is a huge plus. Including .hrl files and having the records
available in the defrecord form is very convenient. While I am no Erlang
expert, I find converting cut and pasted Erlang code to LFE quite easy.
So far, I only had a little bit of trouble with Bit comprehensions on
that front. But, I suspect that is more because I am new to Erlang.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The compiler seems fast enough, but I’ll know more as the number of
source files grow.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-moderately-good&quot;&gt;The Moderately Good&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: … It exists, but things are hard to find. I realize
this is a work in progress and hopefully we will be able to help in some
ways.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The LFE REPL&lt;/strong&gt;: I was thankful for it for understanding behavior which
was not in the documentation or if I was too lazy to look it up.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Unit Test Framework&lt;/strong&gt;: Useful for many cases, but it took me a while to
get it working correctly. I had trouble understanding test outputs,
and the inability to isolate runs to specific tests was a little painful.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-frustrations&quot;&gt;The Frustrations&lt;/h2&gt;

&lt;p&gt;Please bear with me on this. Not all of this relates to LFE entirely, but I
feel it better to list it here in case LFE can have better solutions. The
section is bigger because I’m trying to give all the gory details.&lt;/p&gt;

&lt;h3 id=&quot;the-macro-system&quot;&gt;The Macro System&lt;/h3&gt;

&lt;p&gt;About 80% of the code I wrote in the past 10 days is for macros. It was a
painful experience.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The biggest problem is that the macro system does not report errors properly.
If an expansion encounters an error, all that the compiler reports is
something like “could not expand form”. Or, even more frustratingly
“bad application”. No other information is provided about what the error
was and where it arose. This was true in the LFE REPL as well. It would
REALLY &lt;em&gt;REALLY&lt;/em&gt; help if the underlying error is reported.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I got around these issues by writing helper functions which I could debug
in the repl, but it took me a while to settle on this methodology. It
makes my macros a trivial shell over a helper function, which makes for
uglier code.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note, however, the macro system works correctly once the macros are debugged. There are no issues with correctness.&lt;/p&gt;

&lt;h3 id=&quot;stringsbinary-complexity&quot;&gt;Strings/Binary Complexity&lt;/h3&gt;

&lt;p&gt;My ideal situation here would be that LFE provide a mechanism for letting
developers choose to always use Erlang binaries. We are
&lt;a href=&quot;https://groups.google.com/d/msg/lisp-flavoured-erlang/pF4retTadzw/bwmz6a6BNZYJ&quot;&gt;currently discussing exactly this&lt;/a&gt;
on the mail list.&lt;/p&gt;

&lt;h3 id=&quot;erlangs-formatted-io&quot;&gt;Erlang’s Formatted I/O&lt;/h3&gt;

&lt;p&gt;Given my long exposure to Common Lisp’s format, I feel that &lt;code&gt;&quot;~p&quot;&lt;/code&gt; is woefully
inadequate. One of my resolutions is to contribute a CL compatible format
function to LFE. I would love to collaborate with anyone who is interested
in this.&lt;/p&gt;

&lt;h3 id=&quot;one-right-way&quot;&gt;One Right Way&lt;/h3&gt;

&lt;p&gt;One other thing on my wish-list would be that LFE be a little more opinionated
on syntax choices. Allowing multiple ways to define functions etc., while
helpful to lazy old goats like me, probably complicates the language more
than necessary. It may be best left to user-defined macros to provide
alternatives.&lt;/p&gt;

&lt;h2 id=&quot;closing-thoughts&quot;&gt;Closing Thoughts&lt;/h2&gt;

&lt;p&gt;Anyhow, that is all for now. More as things develop. Congratulations on
getting LFE this far.&lt;/p&gt;

&lt;p&gt;I am working on a document called “LFE for Erlang programmers”, which I will
publish to this group as soon as it reaches some level of stability.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>BYTE, August 1979: The LISP Issue</title>
   <link href="http://blog.lfe.io//archeology/2014/12/15/1848-byte-august-1979-the-lisp-issue"/>
   <updated>2014-12-15T00:00:00-06:00</updated>
   <id>http://blog.lfe.io//archeology/2014/12/15/1848-byte-august-1979-the-lisp-issue</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;/assets/images/posts/byte_1979_08_The_LISP_Issue.jpg&quot;&gt;&lt;img class=&quot;left medium&quot; src=&quot;/assets/images/posts/byte_1979_08_The_LISP_Issue.jpg&quot; /&gt;&lt;/a&gt;The image from this post
is from
&lt;a href=&quot;https://twitter.com/DynamicWebPaige/status/544609553422106625&quot;&gt;a tweet&lt;/a&gt;
by Paige Bailey (&lt;a href=&quot;https://twitter.com/DynamicWebPaige&quot;&gt;@DynamicWebPaige&lt;/a&gt;).
It’s from the August 1979 issue of Byte which was focused on Lisp.
The table of contents is
&lt;a href=&quot;http://pichon.emmanuel.perso.neuf.fr/revues/byte/byte_1979.php&quot;&gt;here&lt;/a&gt; and includes such artciles as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;THE DESIGN OF AN M6800 LISP INTERPRETER&lt;/li&gt;
  &lt;li&gt;LISP APPLICATIONS IN BOOLEAN LOGIC&lt;/li&gt;
  &lt;li&gt;AN OVERVIEW OF LISP&lt;/li&gt;
  &lt;li&gt;LISP BASED SYSTEMS FOR EDUCATION&lt;/li&gt;
  &lt;li&gt;A MATHEMATICIAN’S VIEW OF LISP&lt;/li&gt;
  &lt;li&gt;LISP BASED SYMBOLIC MATH SYSTEMS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The issue also appears to be
&lt;a href=&quot;https://archive.org/details/byte-magazine-1979-08&quot;&gt;available on archive.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After finding a
&lt;a href=&quot;http://pichon.emmanuel.perso.neuf.fr/revues/byte/grand/1979/byte_1979_08.jpg&quot;&gt;larger resolution image&lt;/a&gt;,
I couldn’t resist doing a little Lisp archeaology :-) Here’s a transcript of
what I can see:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;DEFINE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REMBLANK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LAMBDA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;COND&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NIL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;EQ??&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CAR&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;BLANK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REMBLANK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CDR&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CONS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CAR&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REMBLANK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CDR&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;DEFINE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INDT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LAMBDA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;APPEND&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;DEFINE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FETCH&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LAMBDA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROG&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;XPOS&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;FRT&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;BAK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SETQ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;XPOS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CDR&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SETQ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;FRT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CDAR&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SETQ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;BAK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CAAR&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;TST&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CONS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CONS&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I will need the assistance of &lt;a href=&quot;https://twitter.com/rainerjoswig&quot;&gt;Rainer Joswig&lt;/a&gt;
for some bits, but here are some initial notes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;EQ??&lt;/code&gt; - It looks like the question marks could be either a &lt;code&gt;U&lt;/code&gt; or
&lt;code&gt;IL&lt;/code&gt;. In the
&lt;a href=&quot;http://www.softwarepreservation.org/projects/LISP/book/LISP%201.5%20Programmers%20Manual.pdf&quot;&gt;LISP 1.5 Manual&lt;/a&gt;
only &lt;code&gt;EQ&lt;/code&gt; or &lt;code&gt;EQUAL&lt;/code&gt; are given, not &lt;code&gt;EQU&lt;/code&gt;. This could be another form
or alias present in a post-1962 dialect. It could also be a typo ;-)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;L&lt;/code&gt; - I’m not familiar with this call. If this function is what it seems,
a “string indentation” function, then I can only assume that &lt;code&gt;(L N)&lt;/code&gt;
creates a list of spaces of length &lt;code&gt;N&lt;/code&gt;. I couldn’t find a trace of
&lt;code&gt;(L ...)&lt;/code&gt; in the LISP 1.5 Manual.&lt;/li&gt;
  &lt;li&gt;Much of the &lt;code&gt;FETCH&lt;/code&gt; function has been chopped off, but if I’m not mistaken
(and oh my, I very well could be!), the first part actually looks like a
predecessor to the &lt;code&gt;(let ...)&lt;/code&gt; form. Given the function name and the names
of the defined variables, it’s pretty clear what’s going on here :-)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Update from Rainer Joswig&lt;/strong&gt;: he mentioned that we should be sure to check out
a web page that discusses
&lt;a href=&quot;http://www.informatimago.com/develop/lisp/com/informatimago/small-cl-pgms/wang.html&quot;&gt;running old Lisp programms on Common Lisp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The stucture of the first two functions will be more clear if we reformat the
original:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;DEFINE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REMBLANK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LAMBDA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;COND&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NIL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;EQ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CAR&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REMBLANK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CDR&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CONS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CAR&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REMBLANK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CDR&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))))))&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;DEFINE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INDT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LAMBDA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;APPEND&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s the archeology. Let’s try a reconstruction :-)&lt;/p&gt;

&lt;p&gt;Here’s what these functions would look like in a modern Lisp (entered in the
REPL):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;remblank&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cond&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;remblank&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;remblank&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;remblank&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lists:append&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string:copies&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                  &lt;span class=&quot;nb&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;indt&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now let’s take them for a spin!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;remblank&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; J o hn   M cC a  rt hy &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;JohnMcCarthy&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;indt&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Indent me!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;    Indent me!&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That keeps the form fairly similar to what the original is. But we could make
some additional changes to bring it more in line with Erlang/LFE:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;remblank&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;re:replace&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\\s+&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;remblank&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string:copies&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;indt&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That almost feels like cheating …&lt;/p&gt;

&lt;p&gt;This is interesting as a port for LFE, since LFE preserves the list-ness of
strings (thanks to Erlang) as McCarthy’s Lisp of 1962 did: list functions may
be used with strings without problem. As you can see, this is what the original
&lt;code&gt;REMBLANK&lt;/code&gt; function expects.&lt;/p&gt;

&lt;p&gt;To port this to Common Lisp, one would have to do a little more work (such as
using &lt;code&gt;subseq&lt;/code&gt; instead of &lt;code&gt;car&lt;/code&gt; and &lt;code&gt;cdr&lt;/code&gt;).&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>lutil 0.5.0: Composition, Predicates and Core lutil</title>
   <link href="http://blog.lfe.io//announcements/2014/12/14/1645-lutil-050-composition-predicates-core"/>
   <updated>2014-12-14T00:00:00-06:00</updated>
   <id>http://blog.lfe.io//announcements/2014/12/14/1645-lutil-050-composition-predicates-core</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;/assets/images/posts/lutil-leonardo-gears-large.png&quot;&gt;&lt;img class=&quot;right thumb&quot; src=&quot;/assets/images/posts/lutil-leonardo-gears.png&quot; /&gt;&lt;/a&gt;With the
&lt;a href=&quot;https://github.com/lfex/lutil/releases/tag/0.5.0&quot;&gt;release of lutil 0.5.0&lt;/a&gt;,
there are new “compose” functions accompanying the
&lt;a href=&quot;https://github.com/lfex/lutil/commits/master/include/compose-macros.lfe?author=dysinger&quot;&gt;previously-merged&lt;/a&gt;
thrushing macros as well as a new convenience include file which contains all
of lutil’s predicate functions defined for easy use in the REPL or in modules.
Additionally there is a new, experimental include file that is beginning to
define functions and marcos considered “core” to the LFE experience but which
aren’t yet (and may never be) included in LFE-proper. Some of these may wrap
Erlang functions with more options, others may provide new syntax, etc. See
below for usage examples.&lt;/p&gt;

&lt;h2 id=&quot;core-include-file&quot;&gt;Core Include File&lt;/h2&gt;

&lt;p&gt;Be warned! This is for experimentation! Do not depend upon these functions
remaining here in perpetuity.&lt;/p&gt;

&lt;p&gt;This is a new include file while is the home for any functions that feel like
they should be part of the language. They might wrap Erlang functions or
provide basic functionality that’s not in Erlang or LFE proper.&lt;/p&gt;

&lt;p&gt;For now, it’s just the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;seq&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;range&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;next&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;take&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;seq-functions&quot;&gt;&lt;code&gt;seq&lt;/code&gt; Functions&lt;/h3&gt;

&lt;p&gt;Let’s start with pulling in the &lt;code&gt;core&lt;/code&gt; inlude in the LFE REPL:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;include-lib&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;lutil/include/core.lfe&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;loaded&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Erlang doesn’t have a &lt;code&gt;lists:seq/1&lt;/code&gt;, so we made one:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;seq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Having done that, we also provided wrappers for Erlang’s &lt;code&gt;lists:seq/2&lt;/code&gt;
and &lt;code&gt;lists:seq/3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As you can see, we opted for 1 as the default starting element. This follows in
the tradition of many of Erlang’s &lt;code&gt;lists&lt;/code&gt; functions. 0-based sequences can
just use &lt;code&gt;seq/2&lt;/code&gt;, e.g. &lt;code&gt;(seq 0 10)&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;range-functions&quot;&gt;&lt;code&gt;range&lt;/code&gt; Functions&lt;/h3&gt;

&lt;p&gt;These functions were inspired by Clojure’s
&lt;a href=&quot;https://github.com/clojure/clojure/blob/clojure-1.6.0/src/clj/clojure/core.clj#L2725&quot;&gt;range&lt;/a&gt;
function as well as
&lt;a href=&quot;https://docs.python.org/3/glossary.html#term-generator&quot;&gt;Python generators&lt;/a&gt;.
Our &lt;code&gt;range&lt;/code&gt; provides us with the ability to generate an endless series of
integers or floating point numbers without using more memory that what is
required to create a few functions.&lt;/p&gt;

&lt;p&gt;Unlike Python and Clojure, &lt;code&gt;range&lt;/code&gt; is based upon Erlang’s capacity for its
own brand of lazy evaluation as demonstrated in
&lt;a href=&quot;http://erlangraymondtay.blogspot.com/2009/08/example-of-lazy-evaluation-for.html&quot;&gt;this blog post&lt;/a&gt;.
In particular, &lt;code&gt;(range)&lt;/code&gt; returns a function (and so is more akin to Python’s
generators that Clojure’s &lt;code&gt;range&lt;/code&gt; function). When called, it will return a
&lt;code&gt;cons&lt;/code&gt; of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the next element of the defined series, and&lt;/li&gt;
  &lt;li&gt;another function, which will do the same as the previous function (but whose
first &lt;code&gt;cons&lt;/code&gt; element is the next element in the series)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some example usage:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Fun&amp;lt;lfe_eval.23.86468545&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;funcall&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Fun&amp;lt;lfe_eval.23.86468545&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;funcall&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Fun&amp;lt;lfe_eval.23.86468545&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;range&lt;/code&gt; function is actually a special case of the more general &lt;code&gt;next&lt;/code&gt;
function in lutil &lt;code&gt;core&lt;/code&gt;. More on that below.&lt;/p&gt;

&lt;p&gt;lutil &lt;code&gt;core&lt;/code&gt; defines the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;range/0&lt;/code&gt; (default &lt;code&gt;start&lt;/code&gt; of &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;step&lt;/code&gt; of &lt;code&gt;1&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;range/1&lt;/code&gt; - &lt;code&gt;(range start)&lt;/code&gt; (default &lt;code&gt;step&lt;/code&gt; of &lt;code&gt;1&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;range/2&lt;/code&gt; - &lt;code&gt;(range start step)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;take-functions&quot;&gt;&lt;code&gt;take&lt;/code&gt; Functions&lt;/h3&gt;

&lt;p&gt;For &lt;code&gt;range&lt;/code&gt; to be very useful, we need be able to pull values from it.
Otherwise, we’re left with usage like the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;funcall&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Fun&amp;lt;lfe_eval.23.86468545&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;funcall&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;funcall&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Fun&amp;lt;lfe_eval.23.86468545&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;funcall&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;funcall&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;funcall&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Fun&amp;lt;lfe_eval.23.86468545&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;funcall&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;funcall&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;funcall&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;funcall&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Fun&amp;lt;lfe_eval.23.86468545&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That certainly has its own &lt;em&gt;peculiar&lt;/em&gt; charm, but does not rate too highly in
convenience. As such, a function like Clojure’s &lt;code&gt;take&lt;/code&gt; has been added to
lutil &lt;code&gt;core&lt;/code&gt;. It does just what is says: takes a certain number of elements
from our infinite series.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Hej! That’s much nicer than the above :-)&lt;/p&gt;

&lt;p&gt;Sometimes one’s code will be using both infinite series as well as definite
lists and it would be nice to not have to change functions if the source
of the data changes. As such, we’ve modified &lt;code&gt;take&lt;/code&gt; to provide a wrapper
for &lt;code&gt;lists:sublist/2&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the &lt;code&gt;take&lt;/code&gt; wrapper swaps the positions of
the arguments so that it may be used with the &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt; macro. If you need to
take from a list with the &lt;code&gt;-&amp;gt;&lt;/code&gt; macro, you will need to use
&lt;code&gt;lists:sublist/2&lt;/code&gt;. (Be sure to see the section below for usage examples
of &lt;code&gt;-&amp;gt;&lt;/code&gt; and &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt;!)&lt;/p&gt;

&lt;p&gt;We also added the following, as it eneded up being useful:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One last point on &lt;code&gt;take&lt;/code&gt;: it is not based upon an element value, but rather
the length of the accumulator. If you have use cases where you need to only
take elements up to a certain value, let us know and we can generalize this
further (also: patches welcome!).&lt;/p&gt;

&lt;h3 id=&quot;next-functions&quot;&gt;&lt;code&gt;next&lt;/code&gt; Functions&lt;/h3&gt;

&lt;p&gt;Under the hood, the &lt;code&gt;range&lt;/code&gt; function actually wraps the &lt;code&gt;next&lt;/code&gt; function.
&lt;code&gt;next&lt;/code&gt; is a more general form that will repeatedly call a user-provided
2-arity function. In the case of &lt;code&gt;range&lt;/code&gt;, that function is addition.&lt;/p&gt;

&lt;p&gt;For example, the following are identical:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;+/2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You may use &lt;code&gt;next&lt;/code&gt; directly to define your own infinite sequences. Here
are a few examples:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;66&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;201&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;606&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1821&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5466&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16401&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;49206&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8192&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16384&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32768&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65536&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;math:pow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4.0&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;25.0&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;676.0&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;458329.0&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;210066388900.0&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4.4127887745906175e22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;predicates-include-file&quot;&gt;Predicates Include File&lt;/h2&gt;

&lt;p&gt;This set of changes (and examples) is the most tame of the bunch. lutil
has implemented several predicates of the form &lt;code&gt;name?&lt;/code&gt; for the past while.&lt;/p&gt;

&lt;p&gt;As projects have started to rely upon these more heavily, it seemed prudent
to provide the increasingly-more-used predicates in include-form (thus
alleviating developers having to use the full &lt;code&gt;mod:fun&lt;/code&gt; syntax or from
complicated and hard-to-maintain special imports).&lt;/p&gt;

&lt;p&gt;Here’s a quick way of seeing which predicates are supported:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sets:from_list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lutil:get-env-funcs&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;include-lib&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;lutil/include/predicates.lfe&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;loaded&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sets:from_list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lutil:get-env-funcs&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;49&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;loaded-funcs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lists:sort&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sets:to_list&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sets:subtract&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we can see the functions available in our REPL environment that were
brought in from &lt;code&gt;include-lib&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lfe_io:format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~p~n&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;loaded-funcs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;all?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;any?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;atom?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;binary?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bitstring?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bool?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dict?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;element?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;empty?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;even?&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;every?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;false?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;float?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;func?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;function?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;identical?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;in?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;int?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;integer?&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;list?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;loaded&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;neg?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nil?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;not-any?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;not-in?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;number?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;odd?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pos?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;record?&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;reference?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;set?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;true?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tuple?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;undef?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;undefined?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;unicode?&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;zero?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ok&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can use the predicates include from the REPL or in modules with the usual
&lt;code&gt;include-lib&lt;/code&gt; call, as above.&lt;/p&gt;

&lt;p&gt;Some example usage:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;zero?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;zero?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;all?&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;even?/1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;all?&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;even?/1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;compose-functions&quot;&gt;&lt;code&gt;compose&lt;/code&gt; Functions&lt;/h2&gt;

&lt;p&gt;All of the 0.5.0 changes detailed above were actually yak-shavings in support of
the &lt;code&gt;compose&lt;/code&gt; functions. These new functions have been added as companions to
the threshing macros (see below). These are similar to Clojure’s &lt;code&gt;compose&lt;/code&gt;
function, but with some syntactic sugar to assist with the fact that LFE is a
Lisp-2.&lt;/p&gt;

&lt;p&gt;Pull in the functions:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;include-lib&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;lutil/include/compose.lfe&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;loaded&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let’s call &lt;code&gt;compose/2&lt;/code&gt; on two math functions:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;funcall&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compose&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;math:sin/1&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;math:asin/1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;0.49999999999999994&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now let’s use &lt;code&gt;compose/1&lt;/code&gt; on a list of functions:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;funcall&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;math:sin/1&lt;/span&gt;
                      &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;math:asin/1&lt;/span&gt;
                      &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
           &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is compose being used in a filter:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;include-lib&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;lutil/include/predicates.lfe&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;loaded&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lists:filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compose&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;not/1&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;zero?/1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Unlike schemes and Clojure, when calling &lt;code&gt;compose&lt;/code&gt; directly, we can’t just
wrap parens around our function – we need to call &lt;code&gt;funcall&lt;/code&gt; on it. But we can
cheat, with a little help from Erlang arities :-)&lt;/p&gt;

&lt;p&gt;The following are provided as conveniences when using compose by itself (in
other words, not in a call to &lt;code&gt;lists:map&lt;/code&gt;, &lt;code&gt;lists:filter&lt;/code&gt;, a predicate,
etc.):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compose&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;math:sin/1&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;math:asin/1&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;0.49999999999999994&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;math:sin/1&lt;/span&gt;
             &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;math:asin/1&lt;/span&gt;
             &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
           &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;thrushing-macros&quot;&gt;Thrushing Macros&lt;/h2&gt;

&lt;p&gt;And now we’ve reached dessert :-)&lt;/p&gt;

&lt;p&gt;The following examples are for functionality that was previously added to
lutil, authored originally by
&lt;a href=&quot;https://github.com/dysinger/lfesl/blob/master/include/thread.lfe&quot;&gt;Tim Dysinger&lt;/a&gt;.
Though not part of this release, these bonus usage examples are provided since
it’s such a cool set of macros, inspired by their
Clojure analogs &lt;a href=&quot;http://clojuredocs.org/clojure.core/-%3E&quot;&gt;-&amp;gt;&lt;/a&gt;
and &lt;a href=&quot;http://clojuredocs.org/clojure.core/-%3E%3E&quot;&gt;-&amp;gt; &amp;gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;the---macro&quot;&gt;The &lt;code&gt;-&amp;gt;&lt;/code&gt; Macro&lt;/h3&gt;

&lt;p&gt;Reading (and sometimes writing) deeply nested functions can be a bit awkward:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lists:sublist&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lists:reverse&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lists:sort&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lists:merge&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string:tokens&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string:to_upper&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;a b c d e&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;F&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;L&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;L&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;F&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;E&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This may seem like a contrived example (and well, yes, it is), but there are
use cases where this comes up. In particular, the world of web application
middleware where code is run between request and response one can get large
stacks of nested functions.&lt;/p&gt;

&lt;p&gt;Now grab the thrushing macros:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;include-lib&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;lutil/include/compose.lfe&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;loaded&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here’s how the first thrushing macro can help the previous example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;a b c d e&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string:to_upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string:tokens&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lists:merge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;F&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;L&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lists:sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lists:reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lists:sublist&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;L&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;F&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;E&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What’s happening here is that the output from one function is passed as
(inserted, really) the first argument in the next fucntion.&lt;/p&gt;

&lt;p&gt;The next macro does the opposeite …&lt;/p&gt;

&lt;h3 id=&quot;the---macro-1&quot;&gt;The &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt; Macro&lt;/h3&gt;

&lt;p&gt;Let’s get some includes:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;include-lib&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;lutil/include/predicates.lfe&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;loaded&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;include-lib&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;lutil/include/core.lfe&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;loaded&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next let’s make a bunch of nested calls:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lists:foldl&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;+/2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lists:filter&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compose&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;even?/1&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;round/1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lists:map&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;math:pow&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;seq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;1540.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Grab the thrushing macros:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;include-lib&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;lutil/include/compose.lfe&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;loaded&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And now let’s rewrite the nested functions using the &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt; macro:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;seq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lists:map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;math:pow&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lists:filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compose&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;even?/1&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;round/1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lists:foldl&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;+/2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;1540.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As promised, &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt; does the opposite of &lt;code&gt;-&amp;gt;&lt;/code&gt; in that the output from one
function is &lt;em&gt;appeneded&lt;/em&gt; to the arguments for the next call. In other words, the
output of the previous call is the last argument in the next call.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>lfest 0.0.2 Is Released</title>
   <link href="http://blog.lfe.io//announcements/2014/12/08/1929-lfest-002-is-released"/>
   <updated>2014-12-08T00:00:00-06:00</updated>
   <id>http://blog.lfe.io//announcements/2014/12/08/1929-lfest-002-is-released</id>
   <content type="html">
&lt;p&gt;lfest 0.0.2 includes the addition of text-only responses in addition to the
already-supported HTML and JSON responses. This addition was made in order to
more readily support LFE web app developers writing for services such as Google
App Engine that expect apps to implementparticular resource endpoints
(e.g.,
&lt;a href=&quot;https://cloud.google.com/appengine/docs/python/managed-vms/#health_checking&quot;&gt;/_ah/health&lt;/a&gt;)
which return plain-text responses.&lt;/p&gt;

&lt;p&gt;More information:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lfex/lfest&quot;&gt;lfest repo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lfex/lfest/releases/tag/0.0.2&quot;&gt;lfest 0.0.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;An LFE-Erlang-Docker
&lt;a href=&quot;https://github.com/oubiwann/docker-lfe-yaws-sample-app&quot;&gt;example web app&lt;/a&gt;
which uses lfest for its routing and responses&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Running LFE in Docker</title>
   <link href="http://blog.lfe.io//tutorials/2014/12/07/1837-running-lfe-in-docker"/>
   <updated>2014-12-07T00:00:00-06:00</updated>
   <id>http://blog.lfe.io//tutorials/2014/12/07/1837-running-lfe-in-docker</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;/assets/images/posts/DockerLogo.png&quot;&gt;&lt;img class=&quot;left thumb&quot; src=&quot;/assets/images/posts/DockerLogo.png&quot; /&gt;&lt;/a&gt;With the growing prominence of
&lt;a href=&quot;&quot;&gt;Docker&lt;/a&gt; in PaaS offerings, from
&lt;a href=&quot;https://blog.linode.com/2014/01/03/docker-on-linode/&quot;&gt;Linode&lt;/a&gt; and
&lt;a href=&quot;https://blog.openshift.com/openshift-v3-platform-combines-docker-kubernetes-atomic-and-more/&quot;&gt;OpenShift&lt;/a&gt; to
&lt;a href=&quot;https://cloud.google.com/appengine/docs/managed-vms/custom-runtimes&quot;&gt;Google&lt;/a&gt; and
&lt;a href=&quot;http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_docker.html&quot;&gt;AWS&lt;/a&gt;,
it is increasingly more crucial that open source projects support their users
by offering images which make deploying their apps even easier. We’ve only
&lt;a href=&quot;https://registry.hub.docker.com/u/lfex/lfe/&quot;&gt;just&lt;/a&gt;
&lt;a href=&quot;https://github.com/rvirding/lfe/issues/97&quot;&gt;started&lt;/a&gt;
doing this in the &lt;a href=&quot;http://lfe.io/&quot;&gt;LFE&lt;/a&gt; community, but are already quite
excited by the possibilies and the early successes we’ve seen.&lt;/p&gt;

&lt;p&gt;We’re currently working on an official LFE image for Docker, but in the mean
time, we will demonstrate functionality with an image we’ve made available on
the &lt;a href=&quot;https://registry.hub.docker.com/u/lfex/lfe/&quot;&gt;LFE Exchange in Docker Hub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;background-info&quot;&gt;Background Info&lt;/h2&gt;

&lt;p&gt;For a wonderful intro to Docker, see last year’s OpenShift blog post
&lt;a href=&quot;https://blog.openshift.com/day-21-docker-the-missing-tutorial/&quot;&gt;Day 21: Docker–The Missing Tutorial&lt;/a&gt;
by &lt;a href=&quot;https://twitter.com/shekhargulati&quot;&gt;Shekhar Gulati&lt;/a&gt;. Another &lt;em&gt;fantastic&lt;/em&gt;
resource is the
&lt;a href=&quot;https://github.com/wsargent/docker-cheat-sheet&quot;&gt;Docker cheatsheet&lt;/a&gt; by
&lt;a href=&quot;https://github.com/wsargent&quot;&gt;Will Sargent&lt;/a&gt; of &lt;a href=&quot;https://typesafe.com/&quot;&gt;TypeSafe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It goes without saying, but we want to say it anyway: all of the steps below
are just as applicable for all languages running on the
&lt;a href=&quot;http://erlang.org/&quot;&gt;Erlang&lt;/a&gt; VM: &lt;a href=&quot;http://lfe.io/&quot;&gt;LFE&lt;/a&gt;,
&lt;a href=&quot;http://elixir-lang.org/&quot;&gt;Elixir&lt;/a&gt;,
&lt;a href=&quot;http://joxa.org/&quot;&gt;Joxa&lt;/a&gt;,
&lt;a href=&quot;https://github.com/rvirding/luerl&quot;&gt;Luerl&lt;/a&gt;,
&lt;a href=&quot;https://github.com/rvirding/erlog&quot;&gt;Erlog&lt;/a&gt;,
&lt;a href=&quot;https://github.com/etnt/Haskerl&quot;&gt;Haskerl&lt;/a&gt;, and others. (And, of course,
non-Erlang languages … but those guys get enough attention as it is …)&lt;/p&gt;

&lt;p&gt;Last but not least, when I was setting up the official LFEX org on Docker Hub,
I was pleasantly surprised to see that someone had already pushed up
&lt;a href=&quot;https://registry.hub.docker.com/u/alco/ubuntu-lfe&quot;&gt;an LFE image&lt;/a&gt;, one based on
Ubuntu. Nice work, &lt;a href=&quot;https://twitter.com/true_droid&quot;&gt;Alexei Sholik&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;This tutorial assumes the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You are using &lt;a href=&quot;http://boot2docker.io/&quot;&gt;boot2docker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;You have &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; installed on a host machine&lt;/li&gt;
  &lt;li&gt;Both are up and running&lt;/li&gt;
  &lt;li&gt;You have exported the Docker environment variables in all the terminal
windows you’ll be using (2 to 3 is probably all you need)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to connect to your containers on your LAN when running boot2docker,
you will need to do something like the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;boot2docker ssh -L &amp;lt;HOSTMACHINE&amp;gt;:5099:127.0.0.1:5099&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The server on my LAN that’s running &lt;code&gt;boot2docker&lt;/code&gt; and VirtualBox is
172.16.4.64. So here’s the SSH port forwarding setup I ran on 172.16.4.64
in order to have access to my containers from a laptop on the LAN:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ boot2docker ssh -L 172.16.4.64:5099:127.0.0.1:5099
                        ##        .
                  ## ## ##       ==
               ## ## ## ##      ===
           /&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;\___/ ===
      ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~
           \______ o          __/
             \    \        __/
              \____\______/
 _                 _   ____     _            _
| |__   ___   ___ | |_|___ \ __| | ___   ___| | _____ _ __
| &amp;#39;_ \ / _ \ / _ \| __| __) / _` |/ _ \ / __| |/ / _ \ &amp;#39;__|
| |_) | (_) | (_) | |_ / __/ (_| | (_) | (__|   &amp;lt;  __/ |
|_.__/ \___/ \___/ \__|_____\__,_|\___/ \___|_|\_\___|_|
Boot2Docker version 1.3.2, build master : 495c19a - Mon Nov 24 20:40:58 UTC 2014
Docker version 1.3.2, build 39fa2fa
docker@boot2docker:~$&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You’ll want to leave that window open :-)&lt;/p&gt;

&lt;p&gt;And why wouldn’t you? Just &lt;em&gt;look&lt;/em&gt; at that whale!&lt;/p&gt;

&lt;h2 id=&quot;getting-the-lfe-exchange-docker-image&quot;&gt;Getting the LFE Exchange Docker Image&lt;/h2&gt;

&lt;p&gt;Assuming you have everything instatlled and your forwarding is ready to go,
let’s continue by getting the LFE Docker image:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker pull lfex/lfe&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once it’s finished downloading, you can make sure everything’s working by
running the default command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run lfex/lfe
42&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This image is dead-simple: it’s based on &lt;code&gt;debian:jessie&lt;/code&gt; with the
standard Erlang package from Debian installed on it (as well as the others
needed to support &lt;code&gt;git&lt;/code&gt; and &lt;code&gt;rebar&lt;/code&gt;). We’re working on support for CentOS,
Ubuntu, and OpenSUSE as well.&lt;/p&gt;

&lt;h2 id=&quot;the-lfe-repl&quot;&gt;The LFE REPL&lt;/h2&gt;

&lt;p&gt;Those commands are just executing the default &lt;code&gt;CMD&lt;/code&gt; directive provided with
the image. We can use this image to run all sorts of commands in the
container, such as &lt;code&gt;bash&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run -t -i lfex/lfe /bin/bash&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;root@95bc1d88e581:/#&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Hey, I’ve got an idea …&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;root@95bc1d88e581:/# lfe&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;Erlang/OTP&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;[erts-6.2]&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;[source]&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;[64-bit]&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;[smp:8:8]&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;[async-threads:10]&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;[kernel-poll:false]&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;LFE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Shell&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;V6.2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;abort&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;^G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lists:foldl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lists:seq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While we’re in here, let’s check out some basic version info:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;erlang:system_info&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;otp_release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;17&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;erlang:system_info&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;6.2&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;erlang:system_info&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;driver_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;3.1&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let’s quit out:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;^g&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;command&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;--&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;root@c384176355bd:/# &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We’re no longer running that container, but it still exists:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker ps -a
CONTAINER ID   IMAGE         COMMAND       CREATED    STATUS
0a9b061634b5   f80fa561b172  &lt;span class=&quot;s2&quot;&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;47&lt;/span&gt; s ago   Exited &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt; seconds ago&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But you know what? We can do even better than &lt;code&gt;bash&lt;/code&gt; … by jumping directly
into our favourite REPL :-)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run -t -i lfex/lfe /usr/bin/lfe&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;Erlang/OTP&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;[erts-6.2]&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;[source]&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;[64-bit]&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;[smp:8:8]&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;[async-threads:10]&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;[kernel-poll:false]&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;LFE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Shell&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;V6.2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;abort&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;^G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lists:foldl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lists:seq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1806&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;^g&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;command&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;--&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Quitting brought us all the way out, bask to the host machine.&lt;/p&gt;

&lt;h2 id=&quot;a-simple-customisation-of-the-lfe-dockerfile&quot;&gt;A Simple Customisation of the LFE &lt;code&gt;Dockerfile&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;So far:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We have obtained the LFE image from Docker Hub on our local machine&lt;/li&gt;
  &lt;li&gt;We’ve run it with the default &lt;code&gt;CMD&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;We’ve run it with some custom commands&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we should be comfortable enough using this image to create our own
variation, based on it. We’ll start simple, thought, with a single change
to &lt;code&gt;CMD&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir /tmp/lfe
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /tmp/lfe
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vi Dockerfile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Copy the following into this new file (which is just a change of the
original, upstream &lt;code&gt;lfex/lfe&lt;/code&gt; &lt;code&gt;Dockerfile&lt;/code&gt; from &lt;code&gt;6&lt;/code&gt; to &lt;code&gt;42&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; lfex/lfe
&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt; /usr/bin/lfe -eval &lt;span class=&quot;err&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;io:format &lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;~p~n&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;list &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;* &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lists:foldl &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lambda &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;n acc&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;+ n acc&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lists:seq &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; 42&lt;span class=&quot;o&quot;&gt;)))))&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Save and quit:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;x&lt;/span&gt;:&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And build your new Docker image:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build .
...
Removing intermediate container 73cea1afcab1
Successfully built 46957afffb2c&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Looking in the output of that last command, we can see that our new image
has an ID of &lt;code&gt;46957afffb2c&lt;/code&gt;. Let’s tag it (using your own image, of course):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker tag 46957afffb2c crazy42&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And run it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run crazy42
1806&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Excellent – that’s the right answer :-)&lt;/p&gt;

&lt;p&gt;Let’s take a look at our images so far:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker images
REPOSITORY      TAG          IMAGE ID          CREATED             VIRTUAL SIZE
crazy42         latest       46957afffb2c      &lt;span class=&quot;m&quot;&gt;45&lt;/span&gt; minutes ago      521.9 MB
lfe             latest       e7554d932622      About an hour ago   521.9 MB
lfex/lfe        latest       e7554d932622      About an hour ago   521.9 MB
debian          jessie       aaabd2b41e22      &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt; weeks ago         154.7 MB&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ready to create another one?&lt;/p&gt;

&lt;h2 id=&quot;a-simple-lfeyaws-web-app-image&quot;&gt;A Simple LFE/YAWS Web App Image&lt;/h2&gt;

&lt;p&gt;Let’s go nuts!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir /tmp/sample-app
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /tmp/sample-app
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vi Dockerfile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; lfex/lfe

&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt; APP_DIR /opt/sample-app
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt; APP_REPO https://github.com/oubiwann/docker-lfe-yaws-sample-app.git
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt; DEPS_DIR &lt;span class=&quot;nv&quot;&gt;$APP_DIR&lt;/span&gt;/deps
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt; YAWS_DIR &lt;span class=&quot;nv&quot;&gt;$DEPS_DIR&lt;/span&gt;/yaws
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt; YAWS_APP_ID sampleapp
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt; LFE_DEPS &lt;span class=&quot;nv&quot;&gt;$DEPS_DIR&lt;/span&gt;/lutil:&lt;span class=&quot;nv&quot;&gt;$DEPS_DIR&lt;/span&gt;/exemplar:&lt;span class=&quot;nv&quot;&gt;$DEPS_DIR&lt;/span&gt;/lfest
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt; DEPS &lt;span class=&quot;nv&quot;&gt;$YAWS_DIR&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$LFE_DEPS&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$DEPS_DIR&lt;/span&gt;/ibrowse
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt; ERL_LIBS &lt;span class=&quot;nv&quot;&gt;$ERL_LIBS&lt;/span&gt;:/opt/erlang/lfe:&lt;span class=&quot;nv&quot;&gt;$DEPS&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
        libpam0g-dev

&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; git clone &lt;span class=&quot;nv&quot;&gt;$APP_REPO&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$APP_DIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$APP_DIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
        rebar compile

&lt;span class=&quot;k&quot;&gt;EXPOSE&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5099&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt; sh -c &lt;span class=&quot;s2&quot;&gt;&amp;quot;/opt/sample-app/bin/daemon;while true; do sleep 10; done&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build .
...
Successfully built 1904cb1d856b&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we can tag it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker tag 1904cb1d856b sample-app&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then run it!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run -d -p 5099:5099 sample-app
1b21f79c42ec84cec841b25ff17e921b4d4ce8ee247c5293d5c0d73766a4c713&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let’s make sure that it’s running and that our port is exposed:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker ps
CONTAINER ID   IMAGE               COMMAND                STATUS         PORTS
1b21f79c42ec   sample-app:latest   &lt;span class=&quot;err&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;/bin/sh -c &lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;sh -c   Up &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt; seconds   0.0.0.0:5099-&amp;gt;5099/tcp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then open up &lt;a href=&quot;http://172.16.4.64:5099&quot;&gt;http://172.16.4.64:5099&lt;/a&gt;
(or whatever host you setup for SSH port forwarding) in a web browser. You
should be greeted with someething that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/docker-lfe-sample-app-main-page.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And that’s all there is to it!&lt;/p&gt;

&lt;h2 id=&quot;an-lfe-web-app-aside&quot;&gt;An LFE Web App Aside&lt;/h2&gt;

&lt;p&gt;If you’d like to look at the source code for this sample app, it has been
made available here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/oubiwann/docker-lfe-yaws-sample-app&quot;&gt;https://github.com/oubiwann/docker-lfe-yaws-sample-app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It takes advantage of two interesting LFE libraries:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lfex/lfest&quot;&gt;lfest&lt;/a&gt; - a
Clojure/&lt;a href=&quot;https://github.com/weavejester/compojure&quot;&gt;Compojure&lt;/a&gt;-like
macro for defining app routes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lfex/exemplar&quot;&gt;exemplar&lt;/a&gt; - an LFE library for HTML as
LFE-native s-expressions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are some highlights from the sample app:&lt;/p&gt;

&lt;h3 id=&quot;routes&quot;&gt;Routes&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;defroutes&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;GET&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sample-app-content:get-sidebar-content&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg-data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;GET&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/content/:id&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sample-app-content:get-content&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg-data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;GET&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/relation/:userid/:accountid&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sample-app-content:get-content&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;userid&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;accountid&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg-data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;;; When nothing matches, do this&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;NOTFOUND&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;joined-path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string:join&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Unmatched route!~n~n&amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;s&quot;&gt;&amp;quot;Path-info: ~p~n&amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;s&quot;&gt;&amp;quot;joined path: ~p~n&amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;s&quot;&gt;&amp;quot;arg-data: ~p~n~n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;msg-args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;joined-path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arg-data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;io:format&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;msg-args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sample-app-content:four-oh-four&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;strong&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Unmatched Route: &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;joined-path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;exemplar-content&quot;&gt;Exemplar Content&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;get-side-menu&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;An example reusable menu.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;href&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Main Page&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;href&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/content/1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/content/1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;href&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/content/2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/content/2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;href&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/content/3&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/content/3&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;href&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/relation/1/2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/relation/1/2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;href&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/bob&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;404&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;closing&quot;&gt;Closing&lt;/h2&gt;

&lt;p&gt;There are soooo many more examples and use cases to explore. Hopefully we’ll
be putting some of those up on this blog for the benefit and interest of our
kind readers.&lt;/p&gt;

&lt;p&gt;If you have any questions about the material here, be sure to stop by the
&lt;a href=&quot;https://groups.google.com/forum/#!forum/lisp-flavoured-erlang&quot;&gt;LFE mail list&lt;/a&gt;
and let us know.&lt;/p&gt;

&lt;p&gt;Also, you have any any success stories, cool new LFE Docker images, or other
amazing tales to share, we want to hear there :-)&lt;/p&gt;

&lt;p&gt;See you there!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Usability Update: IErlang Notebook (a la IPython)</title>
   <link href="http://blog.lfe.io//announcements/2014/12/06/1244-ierlang-notebook-a-la-ipython"/>
   <updated>2014-12-06T00:00:00-06:00</updated>
   <id>http://blog.lfe.io//announcements/2014/12/06/1244-ierlang-notebook-a-la-ipython</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;/assets/images/posts/screencapture-ierlang_demo.png&quot;&gt;&lt;img class=&quot;left thumb&quot; src=&quot;/assets/images/posts/screencapture-ierlang_demo.png&quot; /&gt;&lt;/a&gt;Back in April, the Erlang community
was stunned to hear that we had been given an answer to
&lt;a href=&quot;http://ipython.org/&quot;&gt;IPython&lt;/a&gt;, IHaskell, and IJulia –
&lt;a href=&quot;http://robl.co/ierlang-featured-on-hacker-news/&quot;&gt;IErlang&lt;/a&gt;. However, as
&lt;a href=&quot;https://twitter.com/lynchrobbie&quot;&gt;Robbie&lt;/a&gt; noted in the list of outstanding
issues at the end of the IErlang demo notebook, not a lot of time had been set
aside to develop a more standard project structure. Furthermore, the setup and
installation of IErlang to get to the point where you could try it out was a
rather arduous process. All of that has now changed …&lt;/p&gt;

&lt;h2 id=&quot;running-the-new-demo&quot;&gt;Running the New Demo&lt;/h2&gt;

&lt;p&gt;The IErlang project has a series of
&lt;a href=&quot;https://github.com/robbielynch/ierlang/pulls&quot;&gt;open PRs&lt;/a&gt; that address several
of the organizational issues Robbie had lamented, but you don’t have to wait
until they get merged; you can
&lt;a href=&quot;https://github.com/oubiwann/ierlang&quot;&gt;get it now&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git@github.com:oubiwann/ierlang.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ierlang
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make demo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yup. That’s it.&lt;/p&gt;

&lt;p&gt;This will do the following for you:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Set up a Python virtual environment in the project’s working directory (in
&lt;code&gt;./.venv-py2&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Install IPython and its dependencies into that virtual environment&lt;/li&gt;
  &lt;li&gt;Patch IPython to support Erlang&lt;/li&gt;
  &lt;li&gt;Download the Erlang project dependencies&lt;/li&gt;
  &lt;li&gt;Compile the Erlang dependency modules&lt;/li&gt;
  &lt;li&gt;Compile the &lt;code&gt;ierl_*&lt;/code&gt; modules&lt;/li&gt;
  &lt;li&gt;Start up the demo notebook in your browser&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;p&gt;As you might have guessed, this requires that you have the following
installed in your &lt;code&gt;$PATH&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;erl&lt;/code&gt; and &lt;code&gt;erlscript&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;rebar&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Python 2.7 (Python 3.4 support is in the works; see
&lt;a href=&quot;https://github.com/robbielynch/ierlang/issues/6&quot;&gt;the ticket&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outstanding-issues&quot;&gt;Outstanding Issues&lt;/h2&gt;

&lt;p&gt;As you can see at the bottom of the IErlang notebook demo, many of the issues
that Robbie identified earlier this year still remain. In particular, I’ve
added another one to that list: high CPU usage for both &lt;code&gt;console&lt;/code&gt; and
&lt;code&gt;notebook&lt;/code&gt; mode.&lt;/p&gt;

&lt;p&gt;A minor issue I didn’t add, but which I may take up (being the code janitor
that I am) is function-level organization in the modules: most functions are
too long and entail too much logic. They need to be split out (which will
also make it easier for folks to contribute).&lt;/p&gt;

&lt;p&gt;As referenced above, currently only Python 2.7 is supported. Python 3.4 support
is in-progress, but requires cleaning up &lt;code&gt;str&lt;/code&gt; and &lt;code&gt;bytes&lt;/code&gt; handling.&lt;/p&gt;

&lt;h2 id=&quot;future-work&quot;&gt;Future Work&lt;/h2&gt;

&lt;p&gt;The next logical step is to generalize this work (through refactoring!) so that
&lt;a href=&quot;http://lfe.io/&quot;&gt;LFE&lt;/a&gt;,
&lt;a href=&quot;http://elixir-lang.org/&quot;&gt;Elixir&lt;/a&gt;,
&lt;a href=&quot;http://joxa.org/&quot;&gt;Joxa&lt;/a&gt;,
&lt;a href=&quot;https://github.com/rvirding/luerl&quot;&gt;Luerl&lt;/a&gt;,
&lt;a href=&quot;https://github.com/rvirding/erlog&quot;&gt;Erlog&lt;/a&gt;,
&lt;a href=&quot;https://github.com/etnt/Haskerl&quot;&gt;Haskerl&lt;/a&gt;,
and others may also be used with IErlang :-)&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>ErlPort and Python Part II: Making More Calls from LFE</title>
   <link href="http://blog.lfe.io//tutorials/2014/12/03/1828-erlport-and-python-making-more-calls-from-lfe"/>
   <updated>2014-12-03T00:00:00-06:00</updated>
   <id>http://blog.lfe.io//tutorials/2014/12/03/1828-erlport-and-python-making-more-calls-from-lfe</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Erlang-Python-Greats.png&quot;&gt;&lt;img class=&quot;right thumb&quot; src=&quot;/assets/images/posts/Erlang-Python-Greats.png&quot; /&gt;&lt;/a&gt;
A short while ago, I did a
&lt;a href=&quot;http://blog.lfe.io/tutorials/2014/11/21/1508-erlport-using-python-from-erlang-lfe/&quot;&gt;teaser post&lt;/a&gt;
about calling Python from LFE. There was only a tiny bit of code… but! It
came with one of the best Erlang/Python pictures EVAR. You know which one I’m
talking about.&lt;/p&gt;

&lt;p&gt;In this post, we’re going to venture further into this strange and wonderful
landscape. We’ll do this by essentially adapting
&lt;a href=&quot;https://twitter.com/hdima&quot;&gt;Dmitry Vasiliev&lt;/a&gt;’s
&lt;a href=&quot;http://erlport.org/docs/python.html&quot;&gt;ErlPort Python docs&lt;/a&gt; from Erlang to LFE.
We won’t get through all the docs in this post, but we’ll definitely get
further than last time :-)&lt;/p&gt;

&lt;h2 id=&quot;warming-up&quot;&gt;Warming Up&lt;/h2&gt;

&lt;p&gt;We’re going to re-use the demo repo from the last post. If you didn’t get
chance to set it up, you can do that now:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git@github.com:oubiwann/erlport-demo.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;erlport-demo/python
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3.4 -m venv .venv
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;. .venv/bin/activate
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ../lfe
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make repl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you’ve already downloaded and run the REPL before, you can skip the build
step with this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make repl-no-deps&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let’s start the walkthrough by creating two separate running Python servers:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;lt;0.32.0&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pid-2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;lt;0.33.0&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;using-operators&quot;&gt;Using Operators&lt;/h2&gt;

&lt;p&gt;Next, let’s do some basic math:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;operator&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;operator&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;sub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;294&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;252&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;operator&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;mul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;operator&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;floordiv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;294&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;operator&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;truediv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;294&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;42.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The use of operators is extremely convenity, since with ErlPort we are bound
to same the module-function-args approach used in Erlang and LFE. There are
many othe operators we can call, but this should give you a taste.&lt;/p&gt;

&lt;p&gt;The full list of operators provided as builtin functions is available
&lt;a href=&quot;https://docs.python.org/3.4/library/operator.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;using-builtins&quot;&gt;Using Builtins&lt;/h2&gt;

&lt;p&gt;Just for fun, we’ll switch to our other Python server for these examples:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-2&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;builtins&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;sorted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-2&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;builtins&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;_Atom__atoms&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__add__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__class__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__contains__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__delattr__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__dir__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__doc__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__eq__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__format__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__ge__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__getattribute__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__getitem__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__getnewargs__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__gt__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__hash__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__init__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__iter__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__le__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__len__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__lt__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__module__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__mul__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__ne__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__new__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__reduce__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__reduce_ex__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__repr__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__rmul__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__setattr__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__sizeof__&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In Python, if you want to use a module’s functions, classes, and other obejcts,
you need to import them. Some, however, are available as part of the language
and don’t require any importing. These are called the “builtins”.&lt;/p&gt;

&lt;p&gt;Here are a couple more examples:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-2&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;builtins&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-2&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;builtins&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;pow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;265&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-2&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;builtins&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;pow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;65536&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For a full list, see the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Python &lt;a href=&quot;https://docs.python.org/3/library/functions.html#built-in-funcs&quot;&gt;builtin functions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Python &lt;a href=&quot;https://docs.python.org/3/library/constants.html#built-in-consts&quot;&gt;builtin constants&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’re wondering how to deal with constants (since there are no constants in
LFE, and everything is a function), hang tight – we’ll cover that below.&lt;/p&gt;

&lt;h2 id=&quot;python-module-hierarchies&quot;&gt;Python Module Hierarchies&lt;/h2&gt;

&lt;p&gt;We can also call dotted names. Let’s get the cosine of 2$\pi$:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;math&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;cos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.1459&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;0.9999628937632861&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that we’re executing the multiplication in LFE before sending it to
Python. But what if we wanted to get Python’s &lt;code&gt;math.pi&lt;/code&gt; value instead of
using our own? How do we access Python module constants?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;math&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;builtins.TypeError&lt;/span&gt;
                   &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;#39;float&amp;#39; object is not callable&amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;No such luck: &lt;code&gt;math.pi&lt;/code&gt; is a &lt;code&gt;float&lt;/code&gt; and we’re limited to making calls.
Fortunately, though, we have a way out – a hack, but a way out: we can call
methods on constants!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;math&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;pi.__float__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;3.141592653589793&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;math&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;pi.__int__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;math&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;pi.__str__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;3.141592653589793&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yeah, perhaps a bit ugly … but you &lt;em&gt;knew&lt;/em&gt; this wasn’t going to be pretty :-)&lt;/p&gt;

&lt;p&gt;Now we can re-do our example, though:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;math&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;pi.__float__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;3.141592653589793&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;math&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;cos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s more like it :-)&lt;/p&gt;

&lt;h2 id=&quot;errors&quot;&gt;Errors&lt;/h2&gt;

&lt;p&gt;Python exceptions are returned in the &lt;code&gt;error&lt;/code&gt; values. Here’s a function
which prints the error returned from Python as well as the stacktrace in LFE:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;print-error-data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;try&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;unknown&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;unknown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`#(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tracebock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lfe_io:format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Error value: ~p~n&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lfe_io:format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Error stacktrace: ~p~n&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tracebock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;print-error-data&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;print-error-data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;builtins.ImportError&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;&amp;quot;No module named &amp;#39;unknown&amp;#39;&amp;quot;&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/Users/oubiwann/lab/erlang/erlport-demo/lfe...&amp;quot;&lt;/span&gt;
                  &lt;span class=&quot;mi&quot;&gt;236&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&amp;quot;_incoming_call&amp;quot;&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&amp;quot;f = __import__(mod, {}, {}, [objects[0]])&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/Users/oubiwann/lab/erlang/erlport-demo/lfe...&amp;quot;&lt;/span&gt;
                  &lt;span class=&quot;mi&quot;&gt;244&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&amp;quot;_call_with_error_handler&amp;quot;&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&amp;quot;function(*args)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stacktrace:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;erlport&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;src/erlport.erl&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;234&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lfe_eval&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eval_try&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;src/lfe_eval.erl&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;663&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lfe_shell&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eval_form_1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;src/lfe_shell.erl&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;253&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lists&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;foldl&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;lists.erl&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1261&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lfe_shell&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;server_loop&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;src/lfe_shell.erl&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ok&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The Python error is comprised of the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code&gt;&#39;python&lt;/code&gt; atom,&lt;/li&gt;
  &lt;li&gt;The Python exception class, and&lt;/li&gt;
  &lt;li&gt;The Python traceback from the ErlPort library&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s a function that just displays those:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;print-python-error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;try&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;operator&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;truediv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`#(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;traceback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lfe_io:format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Python exception class: ~p~n&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lfe_io:format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Python exception text: ~p~n&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lfe_io:format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ErlPort traceback: ~p~n&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;traceback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;print-python-error&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;print-python-error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;class:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;builtins.ZeroDivisionError&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;text:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;division by zero&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ErlPort&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;traceback:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/Users/oubiwann/Dropbox/lab/erlang/erlport-demo/lfe...&amp;quot;&lt;/span&gt;
                     &lt;span class=&quot;mi&quot;&gt;239&lt;/span&gt;
                     &lt;span class=&quot;s&quot;&gt;&amp;quot;_incoming_call&amp;quot;&lt;/span&gt;
                     &lt;span class=&quot;s&quot;&gt;&amp;quot;result = Atom(b\&amp;quot;r\&amp;quot;), mid,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;                     self.encoder(f(*map(self.decoder, args)))&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                   &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/Users/oubiwann/Dropbox/lab/erlang/erlport-demo/lfe...&amp;quot;&lt;/span&gt;
                     &lt;span class=&quot;mi&quot;&gt;244&lt;/span&gt;
                     &lt;span class=&quot;s&quot;&gt;&amp;quot;_call_with_error_handler&amp;quot;&lt;/span&gt;
                     &lt;span class=&quot;s&quot;&gt;&amp;quot;function(*args)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ok&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the next post we’ll take a look at ErlPorts opaque Python objects.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Community Generated Content</title>
   <link href="http://blog.lfe.io//announcements/2014/12/03/1810-community-generated-content"/>
   <updated>2014-12-03T00:00:00-06:00</updated>
   <id>http://blog.lfe.io//announcements/2014/12/03/1810-community-generated-content</id>
   <content type="html">
&lt;p&gt;As was just mentioned on the
&lt;a href=&quot;https://groups.google.com/d/msg/lisp-flavoured-erlang/61AtcsWcdPY/R2rdE6wy0wQJ&quot;&gt;Lisp Flavoured Erlang mail list&lt;/a&gt;,
this blog is explicitly powered by users from the community sharing their
stories, ideas, tutorials, manifestos, sonnets, and novellas about LFE and, in
fact, any Lisp running on the Erlang VM.&lt;/p&gt;

&lt;p&gt;This was an implicit understanding before, but (to borrow from the
&lt;a href=&quot;&quot;&gt;Zen of Python&lt;/a&gt;, explicit is better than implicit. There’s now a link in the
header of the blog where you can &lt;a href=&quot;https://github.com/lfe/blog/fork&quot;&gt;fork&lt;/a&gt; the
repository. This information is also supplied in the repo’s
&lt;a href=&quot;https://github.com/lfe/blog&quot;&gt;README&lt;/a&gt; file.&lt;/p&gt;

&lt;p&gt;We look forward to receiving your PRs :-)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ErlPort: Using Python from Erlang/LFE</title>
   <link href="http://blog.lfe.io//tutorials/2014/11/21/1508-erlport-using-python-from-erlang-lfe"/>
   <updated>2014-11-21T00:00:00-06:00</updated>
   <id>http://blog.lfe.io//tutorials/2014/11/21/1508-erlport-using-python-from-erlang-lfe</id>
   <content type="html">
&lt;p&gt;This post was originally featured on
&lt;a href=&quot;http://technicae.cogitat.io/2014/11/erlport-using-python-from-erlanglfe.html&quot;&gt;cogitat.io&lt;/a&gt;
and is being reblogged here as an expeiment. This repost is an adventure into
github pages as a blogging platform for code-heavy posts. For year, I have found
Google’s blogger.com cumbersome as a medium for sharing code. The burden has
finally grown too great. It makes sense to use the same platform to share the
prose description of code as that which shares the code itself (i.e.,
repositories and &lt;code&gt;README&lt;/code&gt; files). I can only imagine this will be much less
painful than creating gist code snippets and tweaking them in blogger. As a
bonus, code should now appear in RSS/Atom feeds :-)&lt;/p&gt;

&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Erlang-Python-Greats.png&quot;&gt;&lt;img class=&quot;right thumb&quot; src=&quot;/assets/images/posts/Erlang-Python-Greats.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This blog post is one I’ve been wanting to get out there ever since
I ran across &lt;a href=&quot;http://erlport.org/&quot;&gt;the erlport project&lt;/a&gt; a few years ago. I’m
glad to finally have the chance to sit down and get it out there. I hope that
more people who need to take advantage of Python’s strengths from Erlang/LFE
find out about this project.&lt;/p&gt;

&lt;h2 id=&quot;strengths-and-weaknesses&quot;&gt;Strengths and Weaknesses&lt;/h2&gt;

&lt;p&gt;Erlang was built for fault-tolerance. It had a goal of unprecedented uptimes,
and these have been achieved. It powers 40% of our world’s telecommunications
traffic. It’s capable of supporting amazing levels of concurrency
(remember the &lt;a href=&quot;https://www.sics.se/~joe/apachevsyaws.html&quot;&gt;2007 announcement&lt;/a&gt;
about the performance of YAWS vs. Apache?).&lt;/p&gt;

&lt;p&gt;However, with this knowledge in mind, a common mistake by folks new to Erlang
is to think these performance characteristics will be applicable to their own
particular domain. This has often resulted in failure, disappointment, and the
unjust blaming of Erlang. If you want to process huge files, do lots of string
manipulation, or crunch tons of numbers, Erlang’s not your bag, baby. Try
&lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; or &lt;a href=&quot;http://julialang.org/&quot;&gt;Julia&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But then, you may be thinking: I like supervision trees. I have long-running
processes that I want to be managed per the rules I establish. I want to run
lots of jobs in parallel on my 64-core box. I want to run jobs in parallel
over the network on 64 of my 64-core boxes. Python’s the right tool for the
jobs, but I wish I could manage them with Erlang.&lt;/p&gt;

&lt;p&gt;(There are sooo many other options for the use cases above, many of them
really excellent. But this post is about Erlang/LFE :-)).&lt;/p&gt;

&lt;h2 id=&quot;erlang-ports&quot;&gt;Erlang Ports&lt;/h2&gt;

&lt;p&gt;Traditionally, if you want to run other languages with Erlang in a reliable
way that doesn’t bring your Erlang nodes down with badly behaved code, you
use &lt;a href=&quot;http://erlang.org/doc/reference_manual/ports.html&quot;&gt;Ports&lt;/a&gt;.
(more info is available in the
&lt;a href=&quot;http://www.erlang.org/doc/tutorial/overview.html&quot;&gt;Interoperability Guide&lt;/a&gt;).
This is what
&lt;a href=&quot;http://www.erlang.org/doc/apps/jinterface/jinterface_users_guide.html&quot;&gt;JInterface&lt;/a&gt;
builds upon (and, incidentally, allows for some pretty cool
&lt;a href=&quot;https://github.com/oubiwann/lfecljapp&quot;&gt;integration with Clojure&lt;/a&gt;). However,
this still leaves a pretty significant burden for the Python or Ruby developer
for any serious application needs (quick one-offs that only use one or two
data types are not that big a deal).&lt;/p&gt;

&lt;h2 id=&quot;erlport-quick-start&quot;&gt;ErlPort Quick-Start&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hdima/erlport&quot;&gt;erlport&lt;/a&gt; was created by
&lt;a href=&quot;https://twitter.com/hdima&quot;&gt;Dmitry Vasiliev&lt;/a&gt; in 2009 in an effort to solve just this
problem, making it easier to use of and integrate between Erlang and more common
languages like Python and Ruby. The project is maintained, and in fact has just
received a few updates. Below, we’ll demonstrate some usage in
&lt;a href=&quot;http://lfe.io/&quot;&gt;LFE&lt;/a&gt; with &lt;a href=&quot;https://docs.python.org/3/&quot;&gt;Python 3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to follow along, there’s a demo repo you can check out:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git@github.com:oubiwann/erlport-demo.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;erlport-demo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Change into the repo directory and set up your Python environment:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;python
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3.4 -m venv .venv
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;. .venv/bin/activate
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ../&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, switch over to the LFE directory, and fire up a REPL:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;lfe
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make repl

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;snip&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

Starting an LFE REPL ...
Erlang/OTP &lt;span class=&quot;m&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;erts-6.2&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;64-bit&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;smp:8:8&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; ...

LFE Shell V6.2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;abort with ^G&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that this will first download the necessary dependencies and compile them
(that’s what the &lt;code&gt;[snip]&lt;/code&gt; is eliding).&lt;/p&gt;

&lt;p&gt;Now we’re ready to take erlport for a quick trip down to the local:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;lt;0.32.0&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;sys&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;version.__str__&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;3.4.2 (v3.4.2:ab2c023a9432, Oct  5 2014, 20:42:22) ...&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And that’s all there is to it :-)&lt;/p&gt;

&lt;p&gt;Perhaps in a future post we can dive into the internals, showing you more of the
glory that is erlport. Even better, we could look at more compelling example
usage, approaching some of the functionality offered by such projects as
&lt;a href=&quot;http://discoproject.org/&quot;&gt;Disco&lt;/a&gt; or
&lt;a href=&quot;http://continuum.io/anaconda-server&quot;&gt;Anaconda&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>lfetool v1.2 Is Out!</title>
   <link href="http://blog.lfe.io//announcements/2014/08/31/2024-lfetool-v12-is-out"/>
   <updated>2014-08-31T00:00:00-05:00</updated>
   <id>http://blog.lfe.io//announcements/2014/08/31/2024-lfetool-v12-is-out</id>
   <content type="html">
&lt;p&gt;We’ve just pushed out the latest version of lfetool in the v1.x series. This
was done as a result of several bug reports and conversations made on IRC
(#erlang-lisp, Freenode).&lt;/p&gt;

&lt;p&gt;You can get the latest here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lfe/lfetool/releases/tag/1.2.0&quot;&gt;https://github.com/lfe/lfetool/releases/tag/1.2.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lfe/lfetool/tree/milestone-v1.2&quot;&gt;https://github.com/lfe/lfetool/tree/milestone-v1.2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href=&quot;http://docs.lfe.io/quick-start/1.html&quot;&gt;LFE Quick Start&lt;/a&gt; has also been
updated so that newcomers start off right with the latest stable release of
lfetool :-)&lt;/p&gt;

&lt;p&gt;The issues addressed in the 1.2 release can be found here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lfe/lfetool/issues?q=milestone%3A%22Version+1.2%22+is%3Aclosed&quot;&gt;Milestone 1.2 Issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of the bug reports actually boiled down to issues with conflicting
versions of dependency libraries in project rebar.config files. There was a
recent switch to lutil (away from lfe-utils) and ltest (away from lfeunit and
lunit), and older versions of lfetool couldn’t handle these. Also, some changes
made to lfeutils and or lfeunit just prior to the switch caused some cyclic
dependencies in rebar.&lt;/p&gt;

&lt;p&gt;Do keep in mind that there’s a lot of work going into the v2 rewrite of lfetool
(code is being converted from Bash to LFE), and this release isn’t a
distraction from this effort, but rather an attempt at an improved user
experience for current users :-)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Erlang @ OSCON 2014</title>
   <link href="http://blog.lfe.io//conferences/2014/07/23/0849-erlang--oscon-2014"/>
   <updated>2014-07-23T00:00:00-05:00</updated>
   <id>http://blog.lfe.io//conferences/2014/07/23/0849-erlang--oscon-2014</id>
   <content type="html">
&lt;p&gt;Even though there’s no Erlang-specific booth (or a booth by an Erlang company),
the Erlang OSCON presence has been palpable, albeit in a small-town, gentle
way.&lt;/p&gt;

&lt;p&gt;Day 2 is starting as this is being typed, and it will end spectacularly:
&lt;a href=&quot;http://www.meetup.com/Portland-Erlang-User-Group/events/173296812/?fromJoin=173296812&quot;&gt;OSCON
Erlang meetup / Birds of a Feather Gathering&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Between now and then, there will be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a talk by
&lt;a href=&quot;https://twitter.com/bltroutwine&quot;&gt;Brian Troutwine&lt;/a&gt; on
&lt;a href=&quot;www.oscon.com/oscon2014/public/schedule/detail/34281&quot;&gt;LFE, Elixir, and Joxa
on the Erlang VM (BEAM)&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;a presentation by &lt;a href=&quot;http://www.oscon.com/oscon2014/public/schedule/speaker/174073&quot;&gt;Robert
Virding&lt;/a&gt; and
&lt;a href=&quot;http://www.oscon.com/oscon2014/public/schedule/speaker/174072&quot;&gt;Henning Diedrich &lt;/a&gt; on
&lt;a href=&quot;http://www.oscon.com/oscon2014/public/schedule/detail/35038&quot;&gt;A
Reactive Game Stack: Using Erlang, Lua and VoltDB to Enable a Non-Sharded Game World&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Highlights from Day 1:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Francesco passing out 25 “limited edition” copies of his and Steve’s fantastic book:
&lt;a href=&quot;http://shop.oreilly.com/product/0636920024149.do&quot;&gt;Designing
for Scalability with Erlang/OTP&lt;a&gt;&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Erlang Solutions’ Office Hours at the O’Reilly area in the Expo Hall, complete with
Portland’s famous &lt;a href=&quot;https://twitter.com/oubiwann/statuses/491645680276885504&quot;&gt;Voodoo
Doughnuts&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Three “Erlang” tables at lunch, full of excellence in conversation.&lt;/li&gt;
  &lt;li&gt;Garrett Smith’s talk on &lt;a href=&quot;http://www.oscon.com/oscon2014/public/schedule/detail/34881&quot;&gt;Building
a Massively Scalable Web Server In Erlang&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Evening hang-out time with Erlangers from around the world.&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>LFE Language Summit Review</title>
   <link href="http://blog.lfe.io//update/2014/06/10/0929-lfe-language-summit-review"/>
   <updated>2014-06-10T00:00:00-05:00</updated>
   <id>http://blog.lfe.io//update/2014/06/10/0929-lfe-language-summit-review</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;http://www.erlang-factory.com/&quot;&gt;Erlang Factory&lt;/a&gt; was very kind to
assist Robert Virding in setting up the first “language summit” for LFE here at
&lt;a href=&quot;http://www.erlang-factory.com/euc2014&quot;&gt;Erlang User Conference&lt;/a&gt;
in Stockholm. (We use the term “summit” playfully, since it’s a very unofficial
affair within a small developer community.)&lt;/p&gt;

&lt;p&gt;We took notes in an
&lt;a href=&quot;https://etherpad.wikimedia.org/p/lfe-design-summit-euc2014&quot;&gt;etherpad&lt;/a&gt;,
but below is a review of what we talked about and the general feel of the session.&lt;/p&gt;

&lt;p&gt;We had a nice showing of about 15 to 20 folks who were interested in LFE either
as users, developers, language tinkerers, and the curious. The first half of
the talk was dedicated to a discussion on maps and changes to the
&lt;code&gt;lfe&lt;/code&gt; executable that will make it more shell-like.&lt;/p&gt;

&lt;p&gt;Additional topics covered:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A Standard Library for LFE&lt;/li&gt;
  &lt;li&gt;Getting to Types in LFE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Topics we didn’t get to but will bring up on the mail list:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An Object System for LFE&lt;/li&gt;
  &lt;li&gt;Lazy Evaluation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In general, LFE development is very mellow, done casually in the spare time of
the contributors, completely for the fun of it. It was nice to see that the design
session reflected that same demeanor, that the character didn’t change in a larger
group where opinions were being shared. It will be nice to see what the future 
brings for LFE and how this casual approach scales :-)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Secret History of LFE</title>
   <link href="http://blog.lfe.io//history/2014/05/28/1516-the-secret-history-of-lfe"/>
   <updated>2014-05-28T00:00:00-05:00</updated>
   <id>http://blog.lfe.io//history/2014/05/28/1516-the-secret-history-of-lfe</id>
   <content type="html">
&lt;p&gt;When asked recently about the history of LFE on the &lt;a href=&quot;https://groups.google.com/d/msg/lisp-flavoured-erlang/XA5HeLbQQDk/Jdbf0KJV7dUJ&quot;&gt;LFE mail list&lt;/a&gt;,
Robert replied with some nice information that we couldn’t resist highlighing/duplicating here:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code&gt;The earliest work is actually from 2007 but this was toying with
parsing and implementing a lisp and was more a preamble to LFE. The
real work with LFE didn&#39;t start until 2008. The earliest LFE files I
can find are from March 2008. Originally I wasn&#39;t using github, or any
other vcs for that matter, and just kept the separate versions as
copies of the directory tree.

There were a number of reasons why I started with LFE:

* I was an old lisper and I was interested in implementing a lisp.
* I wanted to implement it in Erlang and see how a lisp that ran on,
  and together with, Erlang would look. A goal was always to make a
  lisp which was specially designed for running on the BEAM and able to
  fully interact with Erlang/OTP.
* I wanted to experiment with compiling another language on top of
  Erlang. So it was also an experiment in generating Core erlang and
  plugging it into the backend of the Erlang compiler.
* I was not working with programming/Erlang at the time so I was
  looking for some interesting programming projects that were not too
  large to do in my spare time.
* I like implementing languages.
* I also thought it would be a fun problem to solve. It contains many
  different parts and is quite open ended.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Thanks again, Robert :-)&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>LFE User Group Meeting: Update</title>
   <link href="http://blog.lfe.io//news/2014/05/25/1523-lfe-user-group-meeting-update"/>
   <updated>2014-05-25T00:00:00-05:00</updated>
   <id>http://blog.lfe.io//news/2014/05/25/1523-lfe-user-group-meeting-update</id>
   <content type="html">
&lt;p&gt;As you may have heard, we’ll be hosting LFE’s first “Language Summit” at the
Erlang User Conference this year in Stockholm. Keep in mind that when we say
“Language Summit”, we are using the time-honored tongue-in-cheek method of
making self-deprecatory remarks.&lt;/p&gt;

&lt;p&gt;Robert has recently sent the mail list an
&lt;a href=&quot;https://groups.google.com/d/msg/lisp-flavoured-erlang/kb047yueF0w/4Swv2cKUwUMJ&quot;&gt;update
on the day and time&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Monday evening at 18:00, June 9th 2014, at the
&lt;a href=&quot;http://www.erlang-factory.com/conference/show/conference-23/home/#venue&quot;&gt;conference site&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href=&quot;http://cogitat.io/2014/05/lfe-design-summit.html&quot;&gt;original announcement&lt;/a&gt;
has also been updated.&lt;/p&gt;

&lt;p&gt;We’re still taking topics, if you’d like to
&lt;a href=&quot;https://docs.google.com/a/cogitat.io/forms/d/1SlQot2mQ8VDcOTfqc9-48CPJpaCX1U1dIkxoEz8fT08/viewform&quot;&gt;submit one&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>History of Erlang</title>
   <link href="http://blog.lfe.io//site/2014/05/25/1026-history-of-erlang"/>
   <updated>2014-05-25T00:00:00-05:00</updated>
   <id>http://blog.lfe.io//site/2014/05/25/1026-history-of-erlang</id>
   <content type="html">
&lt;p&gt;For a full understanding of one’s field, a thorough knowledge of that field’s
origins of that field and its tools is necessary. To encourge a deeper
understanding of Lisp, Erlang, and LFE we have added a new section on the docs
site main page:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.lfe.io/#History&quot;&gt;History&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Erlang history is quite rich and worth the reads (and watches – video is
included!).&lt;/p&gt;

&lt;p&gt;We will add more content here as it is discovered or becomes available.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>LFE Sunday Times</title>
   <link href="http://blog.lfe.io//news/2014/05/23/1114-lfe-sunday-times"/>
   <updated>2014-05-23T00:00:00-05:00</updated>
   <id>http://blog.lfe.io//news/2014/05/23/1114-lfe-sunday-times</id>
   <content type="html">
&lt;p&gt;After watching the LFE Daily from &lt;a href=&quot;http://paper.li&quot;&gt;paper.li&lt;/a&gt; for a few weeks,
it became clear that more interesting material accumulates over the course of a week
rather than 24 hours.&lt;/p&gt;

&lt;p&gt;As such, we’ve updated both the release schedule as well as the name: “LFE Daily” is now
named “LFE Sunday Times”.&lt;/p&gt;

&lt;p&gt;You can access the paper at any time &lt;a href=&quot;https://paper.li/ErlangLisp/1397422779&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoy your weekend reading!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Docs Site Overhaul</title>
   <link href="http://blog.lfe.io//site/2014/05/23/0815-docs-site-overhaul"/>
   <updated>2014-05-23T00:00:00-05:00</updated>
   <id>http://blog.lfe.io//site/2014/05/23/0815-docs-site-overhaul</id>
   <content type="html">
&lt;p&gt;Prior to the new site getting launched, the documentation pages had been
serving multiple-duty:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;LFE documentation, tutorials, guides, etc.&lt;/li&gt;
  &lt;li&gt;Community resources.&lt;/li&gt;
  &lt;li&gt;General landing page for LFE on the web (in addition to the Github code repo).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This has now been reduced to just double-duty :-) (docs and community
resources). At some point, additional refinement may be necessary, but until
then we shall continue on as-is.&lt;/p&gt;

&lt;p&gt;Some changes to be aware of for the docs site:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The old front page is completely gone (including the beloved paragraph
starting with “Nothing Quite Compares… …To the taste of Erlang, aged in
the oaken barrels of Lisp, served at a temperature of perfect hotness”&lt;/li&gt;
  &lt;li&gt;The new front page jumps you right into a view showing all the documentation
options provided by the site.&lt;/li&gt;
  &lt;li&gt;The community page has been over-hauled, refined, and had dead links removed.&lt;/li&gt;
  &lt;li&gt;There is a new page listing the LFE presentations given over the years.&lt;/li&gt;
  &lt;li&gt;“How to Contribute” has now been moved into its own page with a link in the
header.&lt;/li&gt;
  &lt;li&gt;A link is now given in the header for the new main LFE site.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All in all, we believe these new changes will greatly increase the usability of
the site and allow folks to more quickly find what they are looking for.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>LFE Microblog is Open for Business ...</title>
   <link href="http://blog.lfe.io//site/2014/05/22/2301-lfe-microblog-is-open-for-business-"/>
   <updated>2014-05-22T00:00:00-05:00</updated>
   <id>http://blog.lfe.io//site/2014/05/22/2301-lfe-microblog-is-open-for-business-</id>
   <content type="html">
&lt;p&gt;The LFE micoblog site (powered by Jekyll and Bootsrap) is live and ready to go.&lt;/p&gt;

&lt;p&gt;We’ll be posting pertinent content and links here on a regular basis, items
which have some relation – however tenuous – with LFE, Lisps, or Erlang.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>New LFE Site!</title>
   <link href="http://blog.lfe.io//site/2014/05/22/1849-new-lfe-site"/>
   <updated>2014-05-22T00:00:00-05:00</updated>
   <id>http://blog.lfe.io//site/2014/05/22/1849-new-lfe-site</id>
   <content type="html">
&lt;p&gt;Good news, everyone! Professor Farnsworth nodded off, and we’ve had some fun
while he slept.&lt;/p&gt;

&lt;p&gt;LFE has a new main site for the project: &lt;a href=&quot;http://lfe.io/&quot;&gt;lfe.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This has allowed us to remedy the split personality that the LFE docs site was
suffering from: documentation factory and project home page. Things are better
organized, now:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Main site: &lt;a href=&quot;http://lfe.io/&quot;&gt;lfe.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Dedicated docs site: &lt;a href=&quot;http://docs.lfe.io/&quot;&gt;docs.lfe.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The new microblog you’re reading: &lt;a href=&quot;http://blog.lfe.io/&quot;&gt;blog.lfe.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
</feed>