<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>LFE News &amp; Updates</title>
 <link href="http://blog.lfe.io//" rel="self"/>
 <link href="http://blog.lfe.io/"/>
 <updated>2014-12-06T15:51:05-06:00</updated>
 <id>http://blog.lfe.io/</id>
 <author>
   <name>LFElluminati | Alien Alliance</name>
   <email>lisp-flavored-erlang@googlegroups.com</email>
 </author>

 
 <entry>
   <title>Usability Update: IErlang Notebook (a la IPython)</title>
   <link href="http://blog.lfe.io//announcements/2014/12/06/1244-ierlang-notebook-a-la-ipython"/>
   <updated>2014-12-06T00:00:00-06:00</updated>
   <id>http://blog.lfe.io//announcements/2014/12/06/1244-ierlang-notebook-a-la-ipython</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;/assets/images/posts/screencapture-ierlang_demo.png&quot;&gt;&lt;img class=&quot;left thumb&quot; src=&quot;/assets/images/posts/screencapture-ierlang_demo.png&quot; /&gt;&lt;/a&gt;Back in April, the Erlang community
was stunned to hear that we had been given an answer to
&lt;a href=&quot;http://ipython.org/&quot;&gt;IPython&lt;/a&gt;, IHaskell, and IJulia –
&lt;a href=&quot;http://robl.co/ierlang-featured-on-hacker-news/&quot;&gt;IErlang&lt;/a&gt;. However, as
&lt;a href=&quot;https://twitter.com/lynchrobbie&quot;&gt;Robbie&lt;/a&gt; noted in the list of outstanding
issues at the end of the IErlang demo notebook, not a lot of time had been set
aside to develop a more standard project structure. Furthermore, the setup and
installation of IErlang to get to the point where you could try it out was a
rather arduous process. All of that has now changed …&lt;/p&gt;

&lt;h2 id=&quot;running-the-new-demo&quot;&gt;Running the New Demo&lt;/h2&gt;

&lt;p&gt;The IErlang project has a series of
&lt;a href=&quot;https://github.com/robbielynch/ierlang/pulls&quot;&gt;open PRs&lt;/a&gt; that address several
of the organizational issues Robbie had lamented, but you don’t have to wait
until they get merged; you can
&lt;a href=&quot;https://github.com/oubiwann/ierlang&quot;&gt;get it now&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git@github.com:oubiwann/ierlang.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ierlang
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make demo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yup. That’s it.&lt;/p&gt;

&lt;p&gt;This will do the following for you:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Set up a Python virtual environment in the project’s working directory (in
&lt;code&gt;./.venv-py2&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Install IPython and its dependencies into that virtual environment&lt;/li&gt;
  &lt;li&gt;Patch IPython to support Erlang&lt;/li&gt;
  &lt;li&gt;Download the Erlang project dependencies&lt;/li&gt;
  &lt;li&gt;Compile the Erlang dependency modules&lt;/li&gt;
  &lt;li&gt;Compile the &lt;code&gt;ierl_*&lt;/code&gt; modules&lt;/li&gt;
  &lt;li&gt;Start up the demo notebook in your browser&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;p&gt;As you might have guessed, this requires that you have the following
installed in your &lt;code&gt;$PATH&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;erl&lt;/code&gt; and &lt;code&gt;erlscript&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;rebar&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Python 2.7 (Python 3.4 support is in the works; see
&lt;a href=&quot;https://github.com/robbielynch/ierlang/issues/6&quot;&gt;the ticket&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outstanding-issues&quot;&gt;Outstanding Issues&lt;/h2&gt;

&lt;p&gt;As you can see at the bottom of the IErlang notebook demo, many of the issues
that Robbie identified earlier this year still remain. In particular, I’ve
added another one to that list: high CPU usage for both &lt;code&gt;console&lt;/code&gt; and
&lt;code&gt;notebook&lt;/code&gt; mode.&lt;/p&gt;

&lt;p&gt;A minor issue I didn’t add, but which I may take up (being the code janitor
that I am) is function-level organization in the modules: most functions are
too long and entail too much logic. They need to be split out (which will
also make it easier for folks to contribute).&lt;/p&gt;

&lt;p&gt;As referenced above, currently only Python 2.7 is supported. Python 3.4 support
is in-progress, but requires cleaning up &lt;code&gt;str&lt;/code&gt; and &lt;code&gt;bytes&lt;/code&gt; handling.&lt;/p&gt;

&lt;h2 id=&quot;future-work&quot;&gt;Future Work&lt;/h2&gt;

&lt;p&gt;The next logical step is to generalize this work (through refactoring!) so that
&lt;a href=&quot;http://lfe.io/&quot;&gt;LFE&lt;/a&gt;,
&lt;a href=&quot;http://elixir-lang.org/&quot;&gt;Elixir&lt;/a&gt;,
&lt;a href=&quot;http://joxa.org/&quot;&gt;Joxa&lt;/a&gt;,
&lt;a href=&quot;https://github.com/rvirding/luerl&quot;&gt;Luerl&lt;/a&gt;,
&lt;a href=&quot;https://github.com/rvirding/erlog&quot;&gt;Erlog&lt;/a&gt;,
&lt;a href=&quot;https://github.com/etnt/Haskerl&quot;&gt;Haskerl&lt;/a&gt;,
and others may also be used with IErlang :-)&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>ErlPort and Python Part II: Making More Calls from LFE</title>
   <link href="http://blog.lfe.io//tutorials/2014/12/03/1828-erlport-and-python-making-more-calls-from-lfe"/>
   <updated>2014-12-03T00:00:00-06:00</updated>
   <id>http://blog.lfe.io//tutorials/2014/12/03/1828-erlport-and-python-making-more-calls-from-lfe</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Erlang-Python-Greats.png&quot;&gt;&lt;img class=&quot;right thumb&quot; src=&quot;/assets/images/posts/Erlang-Python-Greats.png&quot; /&gt;&lt;/a&gt;
A short while ago, I did a
&lt;a href=&quot;http://blog.lfe.io/tutorials/2014/11/21/1508-erlport-using-python-from-erlang-lfe/&quot;&gt;teaser post&lt;/a&gt;
about calling Python from LFE. There was only a tiny bit of code… but! It
came with one of the best Erlang/Python pictures EVAR. You know which one I’m
talking about.&lt;/p&gt;

&lt;p&gt;In this post, we’re going to venture further into this strange and wonderful
landscape. We’ll do this by adapting
&lt;a href=&quot;https://twitter.com/hdima&quot;&gt;Dmitry Vasiliev&lt;/a&gt;’s’ essentially
&lt;a href=&quot;http://erlport.org/docs/python.html&quot;&gt;ErlPort Python docs&lt;/a&gt; from Erlang to LFE.
We won’t get through all the docs in this post, but we’ll definitely get
further than last time :-)&lt;/p&gt;

&lt;h2 id=&quot;warming-up&quot;&gt;Warming Up&lt;/h2&gt;

&lt;p&gt;We’re going to re-use the demo repo from the last post. If you didn’t get
chance to set it up, you can do that now:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git@github.com:oubiwann/erlport-demo.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;erlport-demo/python
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3.4 -m venv .venv
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;. .venv/bin/activate
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ../lfe
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make repl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you’ve already downloaded and run the REPL before, you can skip the build
step with this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make repl-no-deps&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let’s start the walkthrough by creating two separate running Python servers:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;lt;0.32.0&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pid-2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;lt;0.33.0&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;using-operators&quot;&gt;Using Operators&lt;/h2&gt;

&lt;p&gt;Next, let’s do some basic math:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;operator&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;operator&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;sub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;294&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;252&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;operator&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;mul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;operator&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;floordiv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;294&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;operator&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;truediv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;294&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;42.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The use of operators is extremely convenity, since with ErlPort we are bound
to same the module-function-args approach used in Erlang and LFE. There are
many othe operators we can call, but this should give you a taste.&lt;/p&gt;

&lt;p&gt;The full list of operators provided as builtin functions is available
&lt;a href=&quot;https://docs.python.org/3.4/library/operator.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;using-builtins&quot;&gt;Using Builtins&lt;/h2&gt;

&lt;p&gt;Just for fun, we’ll switch to our other Python server for these examples:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-2&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;builtins&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;sorted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-2&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;builtins&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;_Atom__atoms&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__add__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__class__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__contains__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__delattr__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__dir__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__doc__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__eq__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__format__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__ge__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__getattribute__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__getitem__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__getnewargs__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__gt__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__hash__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__init__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__iter__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__le__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__len__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__lt__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__module__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__mul__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__ne__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__new__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__reduce__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__reduce_ex__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__repr__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__rmul__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__setattr__&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;__sizeof__&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In Python, if you want to use a module’s functions, classes, and other obejcts,
you need to import them. Some, however, are available as part of the language
and don’t require any importing. These are called the “builtins”.&lt;/p&gt;

&lt;p&gt;Here are a couple more examples:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-2&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;builtins&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-2&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;builtins&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;pow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;265&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-2&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;builtins&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;pow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;65536&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For a full list, see the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Python &lt;a href=&quot;https://docs.python.org/3/library/functions.html#built-in-funcs&quot;&gt;builtin functions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Python &lt;a href=&quot;https://docs.python.org/3/library/constants.html#built-in-consts&quot;&gt;builtin constants&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’re wondering how to deal with constants (since there are no constants in
LFE, and everything is a function), hang tight – we’ll cover that below.&lt;/p&gt;

&lt;h2 id=&quot;python-module-hierarchies&quot;&gt;Python Module Hierarchies&lt;/h2&gt;

&lt;p&gt;We can also call dotted names. Let’s get the cosine of 2$\pi$:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;math&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;cos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.1459&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;0.9999628937632861&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that we’re executing the multiplication in LFE before sending it to
Python. But what if we wanted to get Python’s &lt;code&gt;math.pi&lt;/code&gt; value instead of
using our own? How do we access Python module constants?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;math&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;builtins.TypeError&lt;/span&gt;
                   &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;#39;float&amp;#39; object is not callable&amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;No such luck: &lt;code&gt;math.pi&lt;/code&gt; is a &lt;code&gt;float&lt;/code&gt; and we’re limited to making calls.
Fortunately, though, we have a way out – a hack, but a way out: we can call
methods on constants!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;math&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;pi.__float__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;3.141592653589793&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;math&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;pi.__int__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;math&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;pi.__str__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;3.141592653589793&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yeah, perhaps a bit ugly … but you &lt;em&gt;knew&lt;/em&gt; this wasn’t going to be pretty :-)&lt;/p&gt;

&lt;p&gt;Now we can re-do our example, though:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;math&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;pi.__float__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;3.141592653589793&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;math&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;cos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s more like it :-)&lt;/p&gt;

&lt;h2 id=&quot;errors&quot;&gt;Errors&lt;/h2&gt;

&lt;p&gt;Python exceptions are returned in the &lt;code&gt;error&lt;/code&gt; values. Here’s a function
which prints the error returned from Python as well as the stacktrace in LFE:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;print-error-data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;try&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;unknown&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;unknown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`#(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tracebock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lfe_io:format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Error value: ~p~n&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lfe_io:format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Error stacktrace: ~p~n&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tracebock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;print-error-data&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;print-error-data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;builtins.ImportError&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;&amp;quot;No module named &amp;#39;unknown&amp;#39;&amp;quot;&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/Users/oubiwann/lab/erlang/erlport-demo/lfe...&amp;quot;&lt;/span&gt;
                  &lt;span class=&quot;mi&quot;&gt;236&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&amp;quot;_incoming_call&amp;quot;&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&amp;quot;f = __import__(mod, {}, {}, [objects[0]])&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/Users/oubiwann/lab/erlang/erlport-demo/lfe...&amp;quot;&lt;/span&gt;
                  &lt;span class=&quot;mi&quot;&gt;244&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&amp;quot;_call_with_error_handler&amp;quot;&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&amp;quot;function(*args)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stacktrace:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;erlport&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;src/erlport.erl&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;234&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lfe_eval&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eval_try&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;src/lfe_eval.erl&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;663&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lfe_shell&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eval_form_1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;src/lfe_shell.erl&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;253&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lists&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;foldl&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;lists.erl&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1261&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lfe_shell&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;server_loop&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;src/lfe_shell.erl&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ok&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The Python error is comprised of the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code&gt;&#39;python&lt;/code&gt; atom,&lt;/li&gt;
  &lt;li&gt;The Python exception class, and&lt;/li&gt;
  &lt;li&gt;The Python traceback from the ErlPort library&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s a function that just displays those:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;print-python-error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;try&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid-1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;operator&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;truediv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`#(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;traceback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lfe_io:format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Python exception class: ~p~n&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lfe_io:format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Python exception text: ~p~n&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lfe_io:format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ErlPort traceback: ~p~n&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;traceback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;print-python-error&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;print-python-error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;class:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;builtins.ZeroDivisionError&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;text:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;division by zero&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ErlPort&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;traceback:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/Users/oubiwann/Dropbox/lab/erlang/erlport-demo/lfe...&amp;quot;&lt;/span&gt;
                     &lt;span class=&quot;mi&quot;&gt;239&lt;/span&gt;
                     &lt;span class=&quot;s&quot;&gt;&amp;quot;_incoming_call&amp;quot;&lt;/span&gt;
                     &lt;span class=&quot;s&quot;&gt;&amp;quot;result = Atom(b\&amp;quot;r\&amp;quot;), mid,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;                     self.encoder(f(*map(self.decoder, args)))&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                   &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/Users/oubiwann/Dropbox/lab/erlang/erlport-demo/lfe...&amp;quot;&lt;/span&gt;
                     &lt;span class=&quot;mi&quot;&gt;244&lt;/span&gt;
                     &lt;span class=&quot;s&quot;&gt;&amp;quot;_call_with_error_handler&amp;quot;&lt;/span&gt;
                     &lt;span class=&quot;s&quot;&gt;&amp;quot;function(*args)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ok&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the next post we’ll take a look at ErlPorts opaque Python objects.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Community Generated Content</title>
   <link href="http://blog.lfe.io//announcements/2014/12/03/1810-community-generated-content"/>
   <updated>2014-12-03T00:00:00-06:00</updated>
   <id>http://blog.lfe.io//announcements/2014/12/03/1810-community-generated-content</id>
   <content type="html">
&lt;p&gt;As was just mentioned on the
&lt;a href=&quot;https://groups.google.com/d/msg/lisp-flavoured-erlang/61AtcsWcdPY/R2rdE6wy0wQJ&quot;&gt;Lisp Flavoured Erlang mail list&lt;/a&gt;,
this blog is explicitly powered by users from the community sharing their
stories, ideas, tutorials, manifestos, sonnets, and novellas about LFE and, in
fact, any Lisp running on the Erlang VM.&lt;/p&gt;

&lt;p&gt;This was an implicit understanding before, but (to borrow from the
&lt;a href=&quot;&quot;&gt;Zen of Python&lt;/a&gt;, explicit is better than implicit. There’s now a link in the
header of the blog where you can &lt;a href=&quot;https://github.com/lfe/blog/fork&quot;&gt;fork&lt;/a&gt; the
repository. This information is also supplied in the repo’s
&lt;a href=&quot;https://github.com/lfe/blog&quot;&gt;README&lt;/a&gt; file.&lt;/p&gt;

&lt;p&gt;We look forward to receiving your PRs :-)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ErlPort: Using Python from Erlang/LFE</title>
   <link href="http://blog.lfe.io//tutorials/2014/11/21/1508-erlport-using-python-from-erlang-lfe"/>
   <updated>2014-11-21T00:00:00-06:00</updated>
   <id>http://blog.lfe.io//tutorials/2014/11/21/1508-erlport-using-python-from-erlang-lfe</id>
   <content type="html">
&lt;p&gt;This post was originally featured on
&lt;a href=&quot;http://technicae.cogitat.io/2014/11/erlport-using-python-from-erlanglfe.html&quot;&gt;cogitat.io&lt;/a&gt;
and is being reblogged here as an expeiment. This repost is an adventure into
github pages as a blogging platform for code-heavy posts. For year, I have found
Google’s blogger.com cumbersome as a medium for sharing code. The burden has
finally grown too great. It makes sense to use the same platform to share the
prose description of code as that which shares the code itself (i.e.,
repositories and &lt;code&gt;README&lt;/code&gt; files). I can only imagine this will be much less
painful than creating gist code snippets and tweaking them in blogger. As a
bonus, code should now appear in RSS/Atom feeds :-)&lt;/p&gt;

&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Erlang-Python-Greats.png&quot;&gt;&lt;img class=&quot;right thumb&quot; src=&quot;/assets/images/posts/Erlang-Python-Greats.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This blog post is one I’ve been wanting to get out there ever since
I ran across &lt;a href=&quot;http://erlport.org/&quot;&gt;the erlport project&lt;/a&gt; a few years ago. I’m
glad to finally have the chance to sit down and get it out there. I hope that
more people who need to take advantage of Python’s strengths from Erlang/LFE
find out about this project.&lt;/p&gt;

&lt;h2 id=&quot;strengths-and-weaknesses&quot;&gt;Strengths and Weaknesses&lt;/h2&gt;

&lt;p&gt;Erlang was built for fault-tolerance. It had a goal of unprecedented uptimes,
and these have been achieved. It powers 40% of our world’s telecommunications
traffic. It’s capable of supporting amazing levels of concurrency
(remember the &lt;a href=&quot;https://www.sics.se/~joe/apachevsyaws.html&quot;&gt;2007 announcement&lt;/a&gt;
about the performance of YAWS vs. Apache?).&lt;/p&gt;

&lt;p&gt;However, with this knowledge in mind, a common mistake by folks new to Erlang
is to think these performance characteristics will be applicable to their own
particular domain. This has often resulted in failure, disappointment, and the
unjust blaming of Erlang. If you want to process huge files, do lots of string
manipulation, or crunch tons of numbers, Erlang’s not your bag, baby. Try
&lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; or &lt;a href=&quot;http://julialang.org/&quot;&gt;Julia&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But then, you may be thinking: I like supervision trees. I have long-running
processes that I want to be managed per the rules I establish. I want to run
lots of jobs in parallel on my 64-core box. I want to run jobs in parallel
over the network on 64 of my 64-core boxes. Python’s the right tool for the
jobs, but I wish I could manage them with Erlang.&lt;/p&gt;

&lt;p&gt;(There are sooo many other options for the use cases above, many of them
really excellent. But this post is about Erlang/LFE :-)).&lt;/p&gt;

&lt;h2 id=&quot;erlang-ports&quot;&gt;Erlang Ports&lt;/h2&gt;

&lt;p&gt;Traditionally, if you want to run other languages with Erlang in a reliable
way that doesn’t bring your Erlang nodes down with badly behaved code, you
use &lt;a href=&quot;http://erlang.org/doc/reference_manual/ports.html&quot;&gt;Ports&lt;/a&gt;.
(more info is available in the
&lt;a href=&quot;http://www.erlang.org/doc/tutorial/overview.html&quot;&gt;Interoperability Guide&lt;/a&gt;).
This is what
&lt;a href=&quot;http://www.erlang.org/doc/apps/jinterface/jinterface_users_guide.html&quot;&gt;JInterface&lt;/a&gt;
builds upon (and, incidentally, allows for some pretty cool
&lt;a href=&quot;https://github.com/oubiwann/lfecljapp&quot;&gt;integration with Clojure&lt;/a&gt;). However,
this still leaves a pretty significant burden for the Python or Ruby developer
for any serious application needs (quick one-offs that only use one or two
data types are not that big a deal).&lt;/p&gt;

&lt;h2 id=&quot;erlport-quick-start&quot;&gt;ErlPort Quick-Start&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hdima/erlport&quot;&gt;erlport&lt;/a&gt; was created by
&lt;a href=&quot;https://twitter.com/hdima&quot;&gt;Dmitry Vasiliev&lt;/a&gt; in 2009 in an effort to solve just this
problem, making it easier to use of and integrate between Erlang and more common
languages like Python and Ruby. The project is maintained, and in fact has just
received a few updates. Below, we’ll demonstrate some usage in
&lt;a href=&quot;http://lfe.io/&quot;&gt;LFE&lt;/a&gt; with &lt;a href=&quot;https://docs.python.org/3/&quot;&gt;Python 3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to follow along, there’s a demo repo you can check out:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git@github.com:oubiwann/erlport-demo.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;erlport-demo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Change into the repo directory and set up your Python environment:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;python
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3.4 -m venv .venv
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;. .venv/bin/activate
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ../&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, switch over to the LFE directory, and fire up a REPL:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;lfe
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make repl

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;snip&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

Starting an LFE REPL ...
Erlang/OTP &lt;span class=&quot;m&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;erts-6.2&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;64-bit&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;smp:8:8&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; ...

LFE Shell V6.2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;abort with ^G&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that this will first download the necessary dependencies and compile them
(that’s what the &lt;code&gt;[snip]&lt;/code&gt; is eliding).&lt;/p&gt;

&lt;p&gt;Now we’re ready to take erlport for a quick trip down to the local:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;lt;0.32.0&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;python:call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;sys&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;version.__str__&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;3.4.2 (v3.4.2:ab2c023a9432, Oct  5 2014, 20:42:22) ...&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And that’s all there is to it :-)&lt;/p&gt;

&lt;p&gt;Perhaps in a future post we can dive into the internals, showing you more of the
glory that is erlport. Even better, we could look at more compelling example
usage, approaching some of the functionality offered by such projects as
&lt;a href=&quot;http://discoproject.org/&quot;&gt;Disco&lt;/a&gt; or
&lt;a href=&quot;http://continuum.io/anaconda-server&quot;&gt;Anaconda&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>lfetool v1.2 Is Out!</title>
   <link href="http://blog.lfe.io//releases/2014/08/31/2024-lfetool-v12-is-out"/>
   <updated>2014-08-31T00:00:00-05:00</updated>
   <id>http://blog.lfe.io//releases/2014/08/31/2024-lfetool-v12-is-out</id>
   <content type="html">
&lt;p&gt;We’ve just pushed out the latest version of lfetool in the v1.x series. This
was done as a result of several bug reports and conversations made on IRC
(#erlang-lisp, Freenode).&lt;/p&gt;

&lt;p&gt;You can get the latest here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lfe/lfetool/releases/tag/1.2.0&quot;&gt;https://github.com/lfe/lfetool/releases/tag/1.2.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lfe/lfetool/tree/milestone-v1.2&quot;&gt;https://github.com/lfe/lfetool/tree/milestone-v1.2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href=&quot;http://docs.lfe.io/quick-start/1.html&quot;&gt;LFE Quick Start&lt;/a&gt; has also been
updated so that newcomers start off right with the latest stable release of
lfetool :-)&lt;/p&gt;

&lt;p&gt;The issues addressed in the 1.2 release can be found here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lfe/lfetool/issues?q=milestone%3A%22Version+1.2%22+is%3Aclosed&quot;&gt;Milestone 1.2 Issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of the bug reports actually boiled down to issues with conflicting
versions of dependency libraries in project rebar.config files. There was a
recent switch to lutil (away from lfe-utils) and ltest (away from lfeunit and
lunit), and older versions of lfetool couldn’t handle these. Also, some changes
made to lfeutils and or lfeunit just prior to the switch caused some cyclic
dependencies in rebar.&lt;/p&gt;

&lt;p&gt;Do keep in mind that there’s a lot of work going into the v2 rewrite of lfetool
(code is being converted from Bash to LFE), and this release isn’t a
distraction from this effort, but rather an attempt at an improved user
experience for current users :-)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Erlang @ OSCON 2014</title>
   <link href="http://blog.lfe.io//conferences/2014/07/23/0849-erlang--oscon-2014"/>
   <updated>2014-07-23T00:00:00-05:00</updated>
   <id>http://blog.lfe.io//conferences/2014/07/23/0849-erlang--oscon-2014</id>
   <content type="html">
&lt;p&gt;Even though there’s no Erlang-specific booth (or a booth by an Erlang company),
the Erlang OSCON presence has been palpable, albeit in a small-town, gentle
way.&lt;/p&gt;

&lt;p&gt;Day 2 is starting as this is being typed, and it will end spectacularly:
&lt;a href=&quot;http://www.meetup.com/Portland-Erlang-User-Group/events/173296812/?fromJoin=173296812&quot;&gt;OSCON
Erlang meetup / Birds of a Feather Gathering&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Between now and then, there will be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a talk by
&lt;a href=&quot;https://twitter.com/bltroutwine&quot;&gt;Brian Troutwine&lt;/a&gt; on
&lt;a href=&quot;www.oscon.com/oscon2014/public/schedule/detail/34281&quot;&gt;LFE, Elixir, and Joxa
on the Erlang VM (BEAM)&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;a presentation by &lt;a href=&quot;http://www.oscon.com/oscon2014/public/schedule/speaker/174073&quot;&gt;Robert
Virding&lt;/a&gt; and
&lt;a href=&quot;http://www.oscon.com/oscon2014/public/schedule/speaker/174072&quot;&gt;Henning Diedrich &lt;/a&gt; on
&lt;a href=&quot;http://www.oscon.com/oscon2014/public/schedule/detail/35038&quot;&gt;A
Reactive Game Stack: Using Erlang, Lua and VoltDB to Enable a Non-Sharded Game World&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Highlights from Day 1:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Francesco passing out 25 “limited edition” copies of his and Steve’s fantastic book:
&lt;a href=&quot;http://shop.oreilly.com/product/0636920024149.do&quot;&gt;Designing
for Scalability with Erlang/OTP&lt;a&gt;&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Erlang Solutions’ Office Hours at the O’Reilly area in the Expo Hall, complete with
Portland’s famous &lt;a href=&quot;https://twitter.com/oubiwann/statuses/491645680276885504&quot;&gt;Voodoo
Doughnuts&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Three “Erlang” tables at lunch, full of excellence in conversation.&lt;/li&gt;
  &lt;li&gt;Garrett Smith’s talk on &lt;a href=&quot;http://www.oscon.com/oscon2014/public/schedule/detail/34881&quot;&gt;Building
a Massively Scalable Web Server In Erlang&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Evening hang-out time with Erlangers from around the world.&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>LFE Language Summit Review</title>
   <link href="http://blog.lfe.io//update/2014/06/10/0929-lfe-language-summit-review"/>
   <updated>2014-06-10T00:00:00-05:00</updated>
   <id>http://blog.lfe.io//update/2014/06/10/0929-lfe-language-summit-review</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;http://www.erlang-factory.com/&quot;&gt;Erlang Factory&lt;/a&gt; was very kind to
assist Robert Virding in setting up the first “language summit” for LFE here at
&lt;a href=&quot;http://www.erlang-factory.com/euc2014&quot;&gt;Erlang User Conference&lt;/a&gt;
in Stockholm. (We use the term “summit” playfully, since it’s a very unofficial
affair within a small developer community.)&lt;/p&gt;

&lt;p&gt;We took notes in an
&lt;a href=&quot;https://etherpad.wikimedia.org/p/lfe-design-summit-euc2014&quot;&gt;etherpad&lt;/a&gt;,
but below is a review of what we talked about and the general feel of the session.&lt;/p&gt;

&lt;p&gt;We had a nice showing of about 15 to 20 folks who were interested in LFE either
as users, developers, language tinkerers, and the curious. The first half of
the talk was dedicated to a discussion on maps and changes to the
&lt;code&gt;lfe&lt;/code&gt; executable that will make it more shell-like.&lt;/p&gt;

&lt;p&gt;Additional topics covered:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A Standard Library for LFE&lt;/li&gt;
  &lt;li&gt;Getting to Types in LFE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Topics we didn’t get to but will bring up on the mail list:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An Object System for LFE&lt;/li&gt;
  &lt;li&gt;Lazy Evaluation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In general, LFE development is very mellow, done casually in the spare time of
the contributors, completely for the fun of it. It was nice to see that the design
session reflected that same demeanor, that the character didn’t change in a larger
group where opinions were being shared. It will be nice to see what the future 
brings for LFE and how this casual approach scales :-)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Secret History of LFE</title>
   <link href="http://blog.lfe.io//history/2014/05/28/1516-the-secret-history-of-lfe"/>
   <updated>2014-05-28T00:00:00-05:00</updated>
   <id>http://blog.lfe.io//history/2014/05/28/1516-the-secret-history-of-lfe</id>
   <content type="html">
&lt;p&gt;When asked recently about the history of LFE on the &lt;a href=&quot;https://groups.google.com/d/msg/lisp-flavoured-erlang/XA5HeLbQQDk/Jdbf0KJV7dUJ&quot;&gt;LFE mail list&lt;/a&gt;,
Robert replied with some nice information that we couldn’t resist highlighing/duplicating here:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code&gt;The earliest work is actually from 2007 but this was toying with
parsing and implementing a lisp and was more a preamble to LFE. The
real work with LFE didn&#39;t start until 2008. The earliest LFE files I
can find are from March 2008. Originally I wasn&#39;t using github, or any
other vcs for that matter, and just kept the separate versions as
copies of the directory tree.

There were a number of reasons why I started with LFE:

* I was an old lisper and I was interested in implementing a lisp.
* I wanted to implement it in Erlang and see how a lisp that ran on,
  and together with, Erlang would look. A goal was always to make a
  lisp which was specially designed for running on the BEAM and able to
  fully interact with Erlang/OTP.
* I wanted to experiment with compiling another language on top of
  Erlang. So it was also an experiment in generating Core erlang and
  plugging it into the backend of the Erlang compiler.
* I was not working with programming/Erlang at the time so I was
  looking for some interesting programming projects that were not too
  large to do in my spare time.
* I like implementing languages.
* I also thought it would be a fun problem to solve. It contains many
  different parts and is quite open ended.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Thanks again, Robert :-)&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>LFE User Group Meeting: Update</title>
   <link href="http://blog.lfe.io//news/2014/05/25/1523-lfe-user-group-meeting-update"/>
   <updated>2014-05-25T00:00:00-05:00</updated>
   <id>http://blog.lfe.io//news/2014/05/25/1523-lfe-user-group-meeting-update</id>
   <content type="html">
&lt;p&gt;As you may have heard, we’ll be hosting LFE’s first “Language Summit” at the
Erlang User Conference this year in Stockholm. Keep in mind that when we say
“Language Summit”, we are using the time-honored tongue-in-cheek method of
making self-deprecatory remarks.&lt;/p&gt;

&lt;p&gt;Robert has recently sent the mail list an
&lt;a href=&quot;https://groups.google.com/d/msg/lisp-flavoured-erlang/kb047yueF0w/4Swv2cKUwUMJ&quot;&gt;update
on the day and time&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Monday evening at 18:00, June 9th 2014, at the
&lt;a href=&quot;http://www.erlang-factory.com/conference/show/conference-23/home/#venue&quot;&gt;conference site&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href=&quot;http://cogitat.io/2014/05/lfe-design-summit.html&quot;&gt;original announcement&lt;/a&gt;
has also been updated.&lt;/p&gt;

&lt;p&gt;We’re still taking topics, if you’d like to
&lt;a href=&quot;https://docs.google.com/a/cogitat.io/forms/d/1SlQot2mQ8VDcOTfqc9-48CPJpaCX1U1dIkxoEz8fT08/viewform&quot;&gt;submit one&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>History of Erlang</title>
   <link href="http://blog.lfe.io//site/2014/05/25/1026-history-of-erlang"/>
   <updated>2014-05-25T00:00:00-05:00</updated>
   <id>http://blog.lfe.io//site/2014/05/25/1026-history-of-erlang</id>
   <content type="html">
&lt;p&gt;For a full understanding of one’s field, a thorough knowledge of that field’s
origins of that field and its tools is necessary. To encourge a deeper
understanding of Lisp, Erlang, and LFE we have added a new section on the docs
site main page:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.lfe.io/#History&quot;&gt;History&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Erlang history is quite rich and worth the reads (and watches – video is
included!).&lt;/p&gt;

&lt;p&gt;We will add more content here as it is discovered or becomes available.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>LFE Sunday Times</title>
   <link href="http://blog.lfe.io//news/2014/05/23/1114-lfe-sunday-times"/>
   <updated>2014-05-23T00:00:00-05:00</updated>
   <id>http://blog.lfe.io//news/2014/05/23/1114-lfe-sunday-times</id>
   <content type="html">
&lt;p&gt;After watching the LFE Daily from &lt;a href=&quot;http://paper.li&quot;&gt;paper.li&lt;/a&gt; for a few weeks,
it became clear that more interesting material accumulates over the course of a week
rather than 24 hours.&lt;/p&gt;

&lt;p&gt;As such, we’ve updated both the release schedule as well as the name: “LFE Daily” is now
named “LFE Sunday Times”.&lt;/p&gt;

&lt;p&gt;You can access the paper at any time &lt;a href=&quot;https://paper.li/ErlangLisp/1397422779&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoy your weekend reading!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Docs Site Overhaul</title>
   <link href="http://blog.lfe.io//site/2014/05/23/0815-docs-site-overhaul"/>
   <updated>2014-05-23T00:00:00-05:00</updated>
   <id>http://blog.lfe.io//site/2014/05/23/0815-docs-site-overhaul</id>
   <content type="html">
&lt;p&gt;Prior to the new site getting launched, the documentation pages had been
serving multiple-duty:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;LFE documentation, tutorials, guides, etc.&lt;/li&gt;
  &lt;li&gt;Community resources.&lt;/li&gt;
  &lt;li&gt;General landing page for LFE on the web (in addition to the Github code repo).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This has now been reduced to just double-duty :-) (docs and community
resources). At some point, additional refinement may be necessary, but until
then we shall continue on as-is.&lt;/p&gt;

&lt;p&gt;Some changes to be aware of for the docs site:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The old front page is completely gone (including the beloved paragraph
starting with “Nothing Quite Compares… …To the taste of Erlang, aged in
the oaken barrels of Lisp, served at a temperature of perfect hotness”&lt;/li&gt;
  &lt;li&gt;The new front page jumps you right into a view showing all the documentation
options provided by the site.&lt;/li&gt;
  &lt;li&gt;The community page has been over-hauled, refined, and had dead links removed.&lt;/li&gt;
  &lt;li&gt;There is a new page listing the LFE presentations given over the years.&lt;/li&gt;
  &lt;li&gt;“How to Contribute” has now been moved into its own page with a link in the
header.&lt;/li&gt;
  &lt;li&gt;A link is now given in the header for the new main LFE site.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All in all, we believe these new changes will greatly increase the usability of
the site and allow folks to more quickly find what they are looking for.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>LFE Microblog is Open for Business ...</title>
   <link href="http://blog.lfe.io//site/2014/05/22/2301-lfe-microblog-is-open-for-business-"/>
   <updated>2014-05-22T00:00:00-05:00</updated>
   <id>http://blog.lfe.io//site/2014/05/22/2301-lfe-microblog-is-open-for-business-</id>
   <content type="html">
&lt;p&gt;The LFE micoblog site (powered by Jekyll and Bootsrap) is live and ready to go.&lt;/p&gt;

&lt;p&gt;We’ll be posting pertinent content and links here on a regular basis, items
which have some relation – however tenuous – with LFE, Lisps, or Erlang.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>New LFE Site!</title>
   <link href="http://blog.lfe.io//site/2014/05/22/1849-new-lfe-site"/>
   <updated>2014-05-22T00:00:00-05:00</updated>
   <id>http://blog.lfe.io//site/2014/05/22/1849-new-lfe-site</id>
   <content type="html">
&lt;p&gt;Good news, everyone! Professor Farnsworth nodded off, and we’ve had some fun
while he slept.&lt;/p&gt;

&lt;p&gt;LFE has a new main site for the project: &lt;a href=&quot;http://lfe.io/&quot;&gt;lfe.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This has allowed us to remedy the split personality that the LFE docs site was
suffering from: documentation factory and project home page. Things are better
organized, now:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Main site: &lt;a href=&quot;http://lfe.io/&quot;&gt;lfe.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Dedicated docs site: &lt;a href=&quot;http://docs.lfe.io/&quot;&gt;docs.lfe.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The new microblog you’re reading: &lt;a href=&quot;http://blog.lfe.io/&quot;&gt;blog.lfe.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
</feed>